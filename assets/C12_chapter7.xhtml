<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" dir="ltr" lang="en" xml:lang="en">
<head>
<meta charset="UTF-8"/>
<title>7 Transformation Matrices</title>
<link href="../styles/9781000426359.css" rel="stylesheet" type="text/css"/>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
jax: ["input/TeX","input/MathML","output/SVG"],
extensions: ["tex2jax.js","mml2jax.js","MathEvents.js"],
TeX: {
extensions: ["noErrors.js","noUndefined.js","autoload-all.js"]
},
MathMenu: {
showRenderer: false
},
menuSettings: {
zoom: "Click"
},
messageStyle: "none"
});
</script>
<script src="../mathjax/MathJax.js" type="text/javascript"/>
<meta content="urn:uuid:e0000000-0000-0000-0000-000006665500" name="Adept.expected.resource"/>
</head>
<body epub:type="bodymatter">
<section epub:type="chapter" role="doc-chapter">
<h1 class="chapz" id="c7"><a id="term-947"/><a id="term-985"/><span aria-label="127" epub:type="pagebreak" id="pg_127" role="doc-pagebreak"/><a epub:type="backlink" href="C02a_toc.xhtml#rc7" role="doc-backlink"><span class="green"><span class="big1">7</span><br/>Transformation Matrices</span></a></h1>
<p>The machinery of <a id="index_term1244"/>linear algebra can be used to express many of the operations required to arrange objects in a 3D scene, view them with cameras, and get them onto the screen. <em><a id="index_term433"/><a id="index_term1241"/>Geometric transformations</em> such as rotation, translation, scaling, and projection can be accomplished with matrix multiplication, and the <em><a id="index_term1233"/>transformation matrices</em> used to do this are the subject of this chapter.</p>
<p>We will show how a set of points transform if the points are represented as offset vectors from the origin, and we will use the clock shown in <a href="C12_chapter7.xhtml#f7_1">Figure 7.1</a> as an example of a point set. So think of the clock as a bunch of points that are the ends of vectors whose tails are at the origin. We also discuss how these transforms operate differently on locations (points), displacement vectors, and surface normal vectors.</p>
<section>
<h2 id="sec7_1"><a id="index_term697"/><a id="index_term695"/><a epub:type="backlink" href="C02a_toc.xhtml#rsec7_1" role="doc-backlink"><span class="green">7.1 2D Linear Transformations</span></a></h2>
<p>We can use a 2 × 2 matrix to change, or transform, a 2D vector:</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>a</m:mi></m:mrow><m:mrow><m:mn>11</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>a</m:mi></m:mrow><m:mrow><m:mn>12</m:mn></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>a</m:mi></m:mrow><m:mrow><m:mn>21</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>a</m:mi></m:mrow><m:mrow><m:mn>22</m:mn></m:mrow></m:msub></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mi>x</m:mi></m:mtd></m:mtr><m:mtr><m:mtd><m:mi>y</m:mi></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>a</m:mi></m:mrow><m:mrow><m:mn>11</m:mn></m:mrow></m:msub><m:mi>x</m:mi><m:mo>+</m:mo><m:msub><m:mrow><m:mi>a</m:mi></m:mrow><m:mrow><m:mn>12</m:mn></m:mrow></m:msub><m:mi>y</m:mi></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>a</m:mi></m:mrow><m:mrow><m:mn>21</m:mn></m:mrow></m:msub><m:mi>x</m:mi><m:mo>+</m:mo><m:msub><m:mrow><m:mi>a</m:mi></m:mrow><m:mrow><m:mn>22</m:mn></m:mrow></m:msub><m:mi>y</m:mi></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow><m:mn>.</m:mn></m:mrow></m:mrow></m:mrow></m:math>
</div>
<p>This kind of operation, which takes in a 2-vector and produces another 2-vector by a simple matrix multiplication, is a <em>linear transformation</em>.</p>
<p>By this simple formula, we can achieve a variety of useful transformations, <a id="term-728"/><a id="term-729"/><a id="term-943"/><span aria-label="128" epub:type="pagebreak" id="pg_128" role="doc-pagebreak"/>depending on what we put in the entries of the matrix, as will be discussed in the following sections. For our purposes, consider moving along the <em>x</em>-axis a horizontal move and along the <em>y</em>-axis, a vertical move.</p>
<section>
<h3 id="sec7_1_1"><a id="index_term1250"/><span class="green">7.1.1 Scaling</span></h3>
<p>The most basic transform is a <em>scale</em> along the coordinate axes. This transform can change length and possibly direction:</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mtext>scale</m:mtext><m:mrow><m:mo>(</m:mo><m:msub><m:mrow><m:mi>s</m:mi></m:mrow><m:mrow><m:mi>x</m:mi></m:mrow></m:msub><m:mo>,</m:mo><m:msub><m:mrow><m:mi>s</m:mi></m:mrow><m:mrow><m:mi>y</m:mi></m:mrow></m:msub><m:mo>)</m:mo><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>s</m:mi></m:mrow><m:mrow><m:mi>x</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:msub><m:mrow><m:mi>s</m:mi></m:mrow><m:mrow><m:mi>y</m:mi></m:mrow></m:msub></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mn>.</m:mn></m:mrow></m:mrow></m:mrow></m:math>
</div>
<p>Note what this matrix does to a vector with Cartesian components (<em>x, y</em>) :</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>s</m:mi></m:mrow><m:mrow><m:mi>x</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:msub><m:mrow><m:mi>s</m:mi></m:mrow><m:mrow><m:mi>y</m:mi></m:mrow></m:msub></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mi>x</m:mi></m:mtd></m:mtr><m:mtr><m:mtd><m:mi>y</m:mi></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>s</m:mi></m:mrow><m:mrow><m:mi>x</m:mi></m:mrow></m:msub><m:mi>x</m:mi></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>s</m:mi></m:mrow><m:mrow><m:mi>y</m:mi></m:mrow></m:msub><m:mi>y</m:mi></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mn>.</m:mn></m:mrow></m:mrow></m:mrow></m:mrow></m:math>
</div>
<p>So, just by looking at the matrix of an axis-aligned scale, we can read off the two scale factors.</p>
<aside class="boxed-text-e" epub:type="sidebar">
<p class="noindent1"><span class="blue">Example 9</span> The matrix that shrinks <em>x</em> and <em>y</em> uniformly by a factor of two is (<a href="C12_chapter7.xhtml#f7_1">Figure 7.1</a>)</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mtext>scale</m:mtext><m:mrow><m:mo>(</m:mo><m:mn>0.5</m:mn><m:mo>,</m:mo><m:mn>0.5</m:mn><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>0.5</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0.5</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow><m:mn>.</m:mn></m:mrow></m:math>
</div>
<p>A matrix which halves in the horizontal and increases by three-halves in the vertical is (see <a href="C12_chapter7.xhtml#f7_2">Figure 7.2</a>)</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mtext>scale</m:mtext><m:mrow><m:mo>(</m:mo><m:mn>0.5</m:mn><m:mo>,</m:mo><m:mn>1.5</m:mn><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>0.5</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1.5</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow><m:mn>.</m:mn></m:mrow></m:math>
</div>
<figure id="f7_1" tabindex="0">
<img alt="" src="../images/fig7_1.jpg"/>
<figcaption><p><span class="blue">Figure 7.1.</span> Scaling uniformly by half for each axis: The axis-aligned scale matrix has the proportion of change in each of the diagonal elements and zeroes in the off-diagonal elements.</p></figcaption>
</figure>
<figure id="f7_2" tabindex="0">
<img alt="" src="../images/fig7_2.jpg"/>
<figcaption><p><span class="blue">Figure 7.2.</span> <a id="term-730"/><a id="term-785"/><a id="term-944"/><a id="term-945"/><span aria-label="129" epub:type="pagebreak" id="pg_129" role="doc-pagebreak"/>Scaling nonuniformly in <em>x</em> and <em>y</em>: The scaling matrix is diagonal with non-equal elements. Note that the square outline of the clock becomes a rectangle and the circular face becomes an ellipse.</p></figcaption>
</figure>
</aside>
</section>
<section>
<h3 id="sec7_1_2"><a id="index_term1251"/><span class="green">7.1.2 Shearing</span></h3>
<p>A shear is something that pushes things sideways, producing something like a deck of cards across which you push your hand; the bottom card stays put and cards move more the closer they are to the top of the deck. The horizontal and vertical shear matrices are</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mtext>shear-x</m:mtext><m:mrow><m:mrow><m:mo>(</m:mo><m:mi>s</m:mi><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mi>s</m:mi></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow></m:mrow><m:mo>,</m:mo><m:mtext>shear-y</m:mtext><m:mrow><m:mrow><m:mo>(</m:mo><m:mi>s</m:mi><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mi>s</m:mi></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow></m:mrow><m:mn>.</m:mn></m:mrow></m:math>
</div>
<aside class="boxed-text-e" epub:type="sidebar">
<p class="noindent1"><span class="blue">Example 10</span> The transform that shears horizontally so that vertical lines become 45° lines leaning toward the right is (see <a href="C12_chapter7.xhtml#f7_3">Figure 7.3</a>)</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mtext>shear-x</m:mtext><m:mrow><m:mrow><m:mo>(</m:mo><m:mn>1</m:mn><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow></m:mrow><m:mn>.</m:mn></m:mrow></m:math>
</div>
<figure id="f7_3" tabindex="0">
<img alt="" src="../images/fig7_3.jpg"/>
<figcaption><p><span class="blue">Figure 7.3.</span> An <em>x</em>-shear matrix moves points to the right in proportion to their <em>y</em>-coordinate. Now the square outline of the clock becomes a parallelogram and, as with scaling, the circular face of the clock becomes an ellipse.</p></figcaption>
</figure>
<figure id="f7_4" tabindex="0">
<img alt="" src="../images/fig7_4.jpg"/>
<figcaption><p><span class="blue">Figure 7.4.</span> <a id="term-786"/><a id="term-939"/><a id="term-946"/><span aria-label="130" epub:type="pagebreak" id="pg_130" role="doc-pagebreak"/>A <em>y</em>-shear matrix moves points up in proportion to their <em>x</em>-coordinate.</p></figcaption>
</figure>
</aside>
<p class="indent">An analogous transform vertically is (see <a href="C12_chapter7.xhtml#f7_4">Figure 7.4</a>)</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mtext>shear-y</m:mtext><m:mrow><m:mrow><m:mo>(</m:mo><m:mn>1</m:mn><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mn>.</m:mn></m:mrow></m:mrow></m:mrow></m:math>
</div>
<p>In both cases, the square outline of the sheared clock becomes a parallelogram, and the circular face of the sheared clock becomes an ellipse.</p>
<p class="indentt">Another way to think of a shear is in terms of <a id="index_term1248"/>rotation of only the vertical (or horizontal) axis. The shear transform that takes a vertical axis and tilts it clockwise by an angle ϕ is</p>
<aside class="boxed-text" epub:type="sidebar">
<p class="noindent">In fact, the image of a circle under any matrix transformation is an ellipse.</p>
</aside>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mrow><m:mtext> tan </m:mtext><m:mi>ϕ</m:mi></m:mrow></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mn>.</m:mn></m:mrow></m:mrow></m:math>
</div>
<p>Similarly, the shear matrix which rotates the horizontal axis counterclockwise by angle ϕ is</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mrow><m:mtext> tan </m:mtext><m:mi>ϕ</m:mi></m:mrow></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mn>.</m:mn></m:mrow></m:mrow></m:math>
</div>
<figure id="f7_5" tabindex="0">
<img alt="" src="../images/fig7_5.jpg"/>
<figcaption><p><span class="blue">Figure 7.5.</span> The geometry for Equation (7.1).</p></figcaption>
</figure>
</section>
<section>
<h3 id="sec7_1_3"><span class="green">7.1.3 Rotation</span></h3>
<p>Suppose we want to rotate a vector <strong>a</strong> by an angle ϕ counterclockwise to get vector <strong>b</strong> (<a href="C12_chapter7.xhtml#f7_5">Figure 7.5</a>). If <strong>a</strong> makes an angle α with the <em>x</em>-axis, and its length is <span class="inline-formula"><m:math alttext=""><m:mrow><m:mi>r</m:mi><m:mo>=</m:mo><m:msqrt><m:mrow><m:msubsup><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>a</m:mi></m:mrow><m:mrow><m:mn>2</m:mn></m:mrow></m:msubsup><m:mo>+</m:mo><m:msubsup><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>a</m:mi></m:mrow><m:mrow><m:mn>2</m:mn></m:mrow></m:msubsup></m:mrow></m:msqrt></m:mrow></m:math></span>, then we know that</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>a</m:mi></m:mrow></m:msub><m:mo>=</m:mo><m:mi>r</m:mi><m:mtext>cos</m:mtext><m:mi>α</m:mi><m:mo>,</m:mo></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>a</m:mi></m:mrow></m:msub><m:mo>=</m:mo><m:mi>r</m:mi><m:mtext>sin</m:mtext><m:mi>α</m:mi><m:mn>.</m:mn></m:mtd></m:mtr></m:mtable></m:mrow></m:math>
</div>
<p><a id="term-720"/><a id="term-940"/><span aria-label="131" epub:type="pagebreak" id="pg_131" role="doc-pagebreak"/>Because <strong>b</strong> is a rotation of <strong>a</strong>, it also has length <em>r</em>. Because it is rotated an angle ϕ from <strong>a</strong>, <strong>b</strong> makes an angle (α + ϕ) with the <em>x</em>-axis. Using the trigonometric addition identities (<a href="C07_chapter2.xhtml#sec2_3_3">Section 2.3.3</a>):</p>
<div class="disp-formula" id="equ7_1">
<m:math alttext=""><m:mrow><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>b</m:mi></m:mrow></m:msub><m:mo>=</m:mo><m:mi>r</m:mi><m:mtext> cos </m:mtext><m:mrow><m:mo>(</m:mo><m:mi>α</m:mi><m:mo>+</m:mo><m:mi>ϕ</m:mi><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:mi>r</m:mi><m:mtext>cos</m:mtext><m:mi>α</m:mi><m:mo>⁢</m:mo><m:mtext> </m:mtext><m:mtext> cos </m:mtext><m:mi>ϕ</m:mi><m:mo>−</m:mo><m:mi>r</m:mi><m:mtext> sin </m:mtext><m:mi>α</m:mi><m:mo>⁢</m:mo><m:mtext> sin </m:mtext><m:mtext> </m:mtext><m:mi>ϕ</m:mi><m:mo>,</m:mo></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>b</m:mi></m:mrow></m:msub><m:mo>=</m:mo><m:mi>r</m:mi><m:mtext> cos </m:mtext><m:mrow><m:mo>(</m:mo><m:mi>α</m:mi><m:mo>+</m:mo><m:mi>ϕ</m:mi><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:mi>r</m:mi><m:mtext> sin </m:mtext><m:mi>α</m:mi><m:mo>⁢</m:mo><m:mtext> </m:mtext><m:mtext> cos </m:mtext><m:mi>ϕ</m:mi><m:mo>−</m:mo><m:mi>r</m:mi><m:mtext> cos </m:mtext><m:mi>α</m:mi><m:mo>⁢</m:mo><m:mtext> sin </m:mtext><m:mtext>  </m:mtext><m:mi>ϕ</m:mi><m:mn>.</m:mn></m:mtd></m:mtr><m:mtr><m:mtd/></m:mtr></m:mtable></m:mrow><m:mspace width="3em"/><m:mo>(7.1)</m:mo></m:math>
</div>
<p>Substituting <em>x<sub>a</sub></em> = <em>r</em> cos α and <em>y<sub>a</sub></em> = <em>r</em> sin α gives</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>b</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:mo>=</m:mo></m:mtd><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>a</m:mi></m:mrow></m:msub><m:mtext>cos</m:mtext><m:mtext> </m:mtext><m:mi>ϕ</m:mi><m:mo>⁢</m:mo><m:mtext> </m:mtext><m:mo>−</m:mo><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>a</m:mi></m:mrow></m:msub><m:mtext>sin</m:mtext><m:mtext> </m:mtext><m:mi>ϕ</m:mi><m:mo>,</m:mo></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>b</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:mo>=</m:mo></m:mtd><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>a</m:mi></m:mrow></m:msub><m:mtext>cos</m:mtext><m:mtext> </m:mtext><m:mi>ϕ</m:mi><m:mo>+</m:mo><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>a</m:mi></m:mrow></m:msub><m:mtext>sin</m:mtext><m:mi>ϕ</m:mi><m:mn>.</m:mn><m:mtext> </m:mtext></m:mtd></m:mtr></m:mtable></m:mrow></m:math>
</div>
<p>In matrix form, the transformation that takes <strong>a</strong> to <strong>b</strong> is then</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mtext>rotate</m:mtext><m:mrow><m:mo>(</m:mo><m:mi>ϕ</m:mi><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtext>cos</m:mtext><m:mi>ϕ</m:mi><m:mtext> </m:mtext></m:mtd><m:mtd><m:mo>−</m:mo><m:mtext>sin</m:mtext><m:mi>ϕ</m:mi></m:mtd></m:mtr><m:mtr><m:mtd><m:mtext>sin</m:mtext><m:mi>ϕ</m:mi></m:mtd><m:mtd><m:mtext>cos</m:mtext><m:mi>ϕ</m:mi></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mn>.</m:mn></m:mrow></m:mrow></m:math>
</div>
<aside class="boxed-text-e" epub:type="sidebar">
<p class="noindent1"><span class="blue">Example 11</span> A matrix that rotates vectors by <em>π/</em>4 radians (45°) is (see <a href="C12_chapter7.xhtml#f7_6">Figure 7.6</a>)</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtext>cos</m:mtext><m:mfrac><m:mrow><m:mi>π</m:mi></m:mrow><m:mrow><m:mn>4</m:mn></m:mrow></m:mfrac></m:mtd><m:mtd><m:mo>−</m:mo><m:mtext>sin</m:mtext><m:mfrac><m:mrow><m:mi>π</m:mi></m:mrow><m:mrow><m:mn>4</m:mn></m:mrow></m:mfrac></m:mtd></m:mtr><m:mtr><m:mtd><m:mtext>sin</m:mtext><m:mfrac><m:mrow><m:mi>π</m:mi></m:mrow><m:mrow><m:mn>4</m:mn></m:mrow></m:mfrac></m:mtd><m:mtd><m:mtext>cos</m:mtext><m:mfrac><m:mrow><m:mi>π</m:mi></m:mrow><m:mrow><m:mn>4</m:mn></m:mrow></m:mfrac></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>0.707</m:mn></m:mtd><m:mtd><m:mo>−</m:mo><m:mn>0.707</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0.707</m:mn></m:mtd><m:mtd><m:mn>0.707</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow></m:mrow><m:mn>.</m:mn></m:mrow></m:math>
</div>
<figure id="f7_6" tabindex="0">
<img alt="" src="../images/fig7_6.jpg"/>
<figcaption><p><span class="blue">Figure 7.6.</span> A rotation by 45°. Note that the rotation is counterclockwise and that cos(45°) = sin(45°) <em>≈</em> .707.</p></figcaption>
</figure>
<p>A matrix that rotates by <em>π/</em>6 radians (30°)inthe <em>clockwise</em> direction is a rotation by <em>– π/</em>6 radians in our framework (see <a href="C12_chapter7.xhtml#f7_7">Figure 7.7</a>):</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtext>cos</m:mtext><m:mfrac><m:mrow><m:mi>π</m:mi></m:mrow><m:mrow><m:mn>6</m:mn></m:mrow></m:mfrac></m:mtd><m:mtd><m:mo>−</m:mo><m:mtext>sin</m:mtext><m:mfrac><m:mrow><m:mi>π</m:mi></m:mrow><m:mrow><m:mn>6</m:mn></m:mrow></m:mfrac></m:mtd></m:mtr><m:mtr><m:mtd><m:mtext>sin</m:mtext><m:mfrac><m:mrow><m:mi>π</m:mi></m:mrow><m:mrow><m:mn>6</m:mn></m:mrow></m:mfrac></m:mtd><m:mtd><m:mtext>cos</m:mtext><m:mfrac><m:mrow><m:mi>π</m:mi></m:mrow><m:mrow><m:mn>6</m:mn></m:mrow></m:mfrac></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>0.866</m:mn></m:mtd><m:mtd><m:mn>0.5</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mo>−</m:mo><m:mn>0.5</m:mn></m:mtd><m:mtd><m:mn>0.866</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow></m:mrow><m:mn>.</m:mn></m:mrow></m:math>
</div>
</aside>
<figure id="f7_7" tabindex="0">
<img alt="" src="../images/fig7_7.jpg"/>
<figcaption><p><span class="blue">Figure 7.7.</span> <a id="term-694"/><a id="term-721"/><a id="term-937"/><a id="term-941"/><span aria-label="132" epub:type="pagebreak" id="pg_132" role="doc-pagebreak"/>A rotation by <em>–</em>30°. Note that the rotation is clockwise and that cos(–30°) <em>≈</em> .866 and sin(–30°) = –.5.</p></figcaption>
</figure>
<p>Because the norm of each row of a rotation matrix is one (sin<sup>2</sup> ϕ+cos<sup>2</sup> ϕ = 1), and the rows are orthogonal (cos ϕ(<em>–</em> sin ϕ)+sin ϕ cos ϕ = 0), we see that rotation matrices are orthogonal matrices (<a href="C11_chapter6.xhtml#sec6_2_4">Section 6.2.4</a>). By looking at the matrix, we can read off two pairs of orthonormal vectors: the two columns, which are the vectors to which the <a id="index_term971"/>transformation sends the canonical basis vectors (1, 0) and (0, 1) ; and the rows, which are the vectors that the transformations sends <em>to</em> the canonical basis vectors.</p>
<aside class="boxed-text" epub:type="sidebar">
<p class="noindent">Said briefly, <strong>Re</strong><sub>i</sub> = <strong>u</strong><sub>i</sub> and <strong>Rv</strong><sub>i</sub> = <strong>u</strong><sub>i</sub>, for a rotation with columns <strong>u</strong><sub>i</sub> and rows <strong>v</strong><sub>i</sub>.</p>
</aside>
</section>
<section>
<h3 id="sec7_1_4"><a id="index_term1247"/><span class="green">7.1.4 Reflection</span></h3>
<p>We can reflect a vector across either of the coordinate axes by using a scale with one negative scale factor (see <a href="C12_chapter7.xhtml#f7_8">Figures 7.8</a> and <a href="C12_chapter7.xhtml#f7_9">7.9</a>):</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mtext>reflect-y</m:mtext><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mo>−</m:mo><m:mn>1</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mo>,</m:mo><m:mtext>reflect-x</m:mtext><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mo>−</m:mo><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mn>.</m:mn></m:mrow></m:mrow></m:mrow></m:math>
</div>
<figure id="f7_8" tabindex="0">
<img alt="" src="../images/fig7_8.jpg"/>
<figcaption><p><span class="blue">Figure 7.8.</span> A reflection about the <em>y</em>-axis is achieved by multiplying all <em>x</em>-coordinates by –1.</p></figcaption>
</figure>
<figure id="f7_9" tabindex="0">
<img alt="" src="../images/fig7_9.jpg"/>
<figcaption><p><span class="blue">Figure 7.9.</span> <a id="term-695"/><a id="term-938"/><span aria-label="133" epub:type="pagebreak" id="pg_133" role="doc-pagebreak"/>A reflection about the <em>x</em>-axis is achieved by multiplying all <em>y</em>-coordinates by –1.</p></figcaption>
</figure>
<p class="noindent1">While one might expect that the matrix with <em>–</em>1 in both elements of the diagonal is also a reflection, in fact it is just a rotation by <em>π</em> radians.</p>
</section>
<section>
<h3 id="sec7_1_5"><a id="index_term1236"/><span class="green">7.1.5 Composition and Decomposition of Transformations</span></h3>
<aside class="boxed-text" epub:type="sidebar">
<p class="noindent">This rotation can also be called a “reflection through the origin.”</p>
</aside>
<p class="noindent">It is common for graphics programs to apply more than one transformation to an object. For example, we might want to first apply a scale <strong>S</strong> and then a rotation <strong>R</strong>. This would be done in two steps on a 2D vector <strong>v</strong><sub>1</sub>:</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:msub><m:mrow><m:mtext>first, v</m:mtext></m:mrow><m:mrow><m:mn>2</m:mn></m:mrow></m:msub><m:mo>=</m:mo><m:msub><m:mrow><m:mtext>S</m:mtext></m:mrow><m:mrow><m:mtext>v1</m:mtext><m:mo>,</m:mo></m:mrow></m:msub><m:msub><m:mrow><m:mtext>then, v</m:mtext></m:mrow><m:mrow><m:mn>3</m:mn></m:mrow></m:msub><m:mo>=</m:mo><m:mtext>Rv2.</m:mtext></m:mrow></m:math>
</div>
<p>Another way to write this is</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:msub><m:mrow><m:mtext>v</m:mtext></m:mrow><m:mrow><m:mn>3</m:mn></m:mrow></m:msub><m:mo>=</m:mo><m:mtext>R</m:mtext><m:mrow><m:mo>(</m:mo><m:msub><m:mrow><m:mtext>S</m:mtext></m:mrow><m:mrow><m:mtext>v1</m:mtext></m:mrow></m:msub><m:mo>)</m:mo><m:mn>.</m:mn></m:mrow></m:mrow></m:math>
</div>
<p>Because matrix multiplication is associative, we can also write</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:msub><m:mrow><m:mtext>v</m:mtext></m:mrow><m:mrow><m:mn>3</m:mn></m:mrow></m:msub><m:mo>=</m:mo><m:msub><m:mrow><m:mo>(</m:mo><m:mtext>R</m:mtext><m:mrow><m:mtext>S</m:mtext></m:mrow><m:mo>)</m:mo></m:mrow><m:mrow><m:mtext>v1</m:mtext></m:mrow></m:msub><m:mn>.</m:mn></m:mrow></m:math>
</div>
<p>In other words, we can represent the effects of transforming a vector by two matrices in sequence using a single matrix of the same size, which we can compute by multiplying the two matrices: <strong>M</strong> = <strong>RS</strong> (<a href="C12_chapter7.xhtml#f7_10">Figure 7.10</a>).</p>
<p>It is <em>very important</em> to remember that these transforms are applied from the <em>right side first</em>. So the matrix <strong>M</strong> = <strong>RS</strong> first applies <strong>S</strong> and then <strong>R</strong>.</p>
<figure id="f7_10" tabindex="0">
<img alt="" src="../images/fig7_10.jpg"/>
<figcaption><p><span class="blue">Figure 7.10.</span> <a id="term-924"/><span aria-label="134" epub:type="pagebreak" id="pg_134" role="doc-pagebreak"/>Applying the two transform matrices in sequence is the same as applying the product of those matrices once. This is a key concept that underlies most graphics hardware and software.</p></figcaption>
</figure>
<aside class="boxed-text-e" epub:type="sidebar">
<p class="noindent1"><span class="blue">Example 12</span> Suppose we want to scale by one-half in the vertical direction and then rotate by <em>π/</em>4 radians (45°). The resulting matrix is</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>0.707</m:mn></m:mtd><m:mtd><m:mo>−</m:mo><m:mn>0.707</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0.707</m:mn></m:mtd><m:mtd><m:mn>0.707</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0.5</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>0.707</m:mn></m:mtd><m:mtd><m:mo>−</m:mo><m:mn>0.353</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0.707</m:mn></m:mtd><m:mtd><m:mn>0.353</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mn>.</m:mn></m:mrow></m:mrow></m:mrow></m:math>
</div>
<p>It is important to always remember that matrix multiplication is not commutative. So the order of transforms <em>does</em> matter. In this example, rotating first and then scaling result in a different matrix (see <a href="C12_chapter7.xhtml#f7_11">Figure 7.11</a>):</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0.5</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>0.707</m:mn></m:mtd><m:mtd><m:mo>−</m:mo><m:mn>0.707</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0.707</m:mn></m:mtd><m:mtd><m:mn>0.707</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow></m:mrow><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>0.707</m:mn></m:mtd><m:mtd><m:mo>−</m:mo><m:mn>0.707</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0.353</m:mn></m:mtd><m:mtd><m:mn>0.353</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mn>.</m:mn></m:mrow></m:mrow></m:math>
</div>
</aside>
<aside class="boxed-text-e" epub:type="sidebar">
<p class="noindent1"><span class="blue">Example 13</span> Using the scale matrices we have presented, nonuniform scaling can only be done along the coordinate axes. If we wanted to stretch our clock by 50% along one of its diagonals, so that 8:00 through 1:00 move to the northwest and 2:00 through 7:00 move to the southeast, we can use rotation matrices in combination with an axis-aligned scaling matrix to get the result we want. The idea is to use a rotation to align the scaling axis with a coordinate axis, then scale along that axis, and then rotate back. In our example, the scaling axis is the “backslash” diagonal of the square, and we can make it parallel to the <em>x</em>-axis with</p>
<figure id="f7_11" tabindex="0">
<img alt="" src="../images/fig7_11.jpg"/>
<figcaption><p><span class="blue">Figure 7.11.</span> <a id="term-925"/><span aria-label="135" epub:type="pagebreak" id="pg_135" role="doc-pagebreak"/>The order in which two transforms are applied is usually important. In this example, we do a scale by one-half in <em>y</em> and then rotate by 45°. Reversing the order in which these two transforms are applied yields a different result.</p></figcaption>
</figure>
<p>a rotation by +45°. Putting these operations together, the full transformation is</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mtext>rotate</m:mtext><m:mrow><m:mo>(</m:mo><m:mo>−</m:mo><m:mtext>45</m:mtext><m:mo>∘</m:mo><m:mo>)</m:mo></m:mrow><m:mtext>scale</m:mtext><m:mrow><m:mo>(</m:mo><m:mn>1</m:mn><m:mo>,</m:mo><m:mn>5</m:mn><m:mo>,</m:mo><m:mn>1</m:mn><m:mo>)</m:mo><m:mrow><m:mtext>rotate</m:mtext><m:mrow><m:mo>(</m:mo><m:mn>45</m:mn><m:mo>∘</m:mo><m:mo>)</m:mo></m:mrow><m:mn>.</m:mn></m:mrow></m:mrow></m:mrow></m:math>
</div>
<aside class="boxed-text" epub:type="sidebar">
<p class="noindent">Remember to read the transformations from right to left.</p>
</aside>
<p class="indent">In mathematical notation, this can be written <strong>RSR</strong><sup>T</sup>. The result of multiplying the three matrices together is</p>
<aside class="boxed-text" epub:type="sidebar">
<p class="noindent">It is no coincidence that this matrix is symmetric— try applying the transpose-of-product rule to the formula <strong>RSR</strong><sup>T</sup>.</p>
</aside>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>1.25</m:mn></m:mtd><m:mtd><m:mo>−</m:mo><m:mn>0.25</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mo>−</m:mo><m:mn>0.25</m:mn></m:mtd><m:mtd><m:mn>1.25</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow></m:mrow></m:math>
</div>
</aside>
<p class="indent"><a id="term-277"/><a id="term-838"/><a id="term-930"/><a id="term-935"/><span aria-label="136" epub:type="pagebreak" id="pg_136" role="doc-pagebreak"/>Building up a transformation from rotation and scaling transformations actually works for any linear transformation, and this fact leads to a powerful way of thinking about these transformations, as explored in the next section.</p>
</section>
<section>
<h3 id="sec7_1_6"><a id="index_term312"/><a id="index_term1238"/><span class="green">7.1.6 Decomposition of Transformations</span></h3>
<p>Sometimes, it’s necessary to “undo” a composition of transformations, taking a transformation apart into simpler pieces. For instance, it’s often useful to present a transformation to the user for manipulation in terms of separate rotations and scale factors, but a transformation might be represented internally simply as a matrix, with the rotations and scales already mixed together. This kind of manipulation can be achieved if the matrix can be computationally disassembled into the desired pieces, the pieces adjusted, and the matrix reassembled by multiplying the pieces together again.</p>
<p>It turns out that this decomposition, or factorization, is possible, regardless of the entries in the matrix—and this fact provides a fruitful way of thinking about transformations and what they do to geometry that is transformed by them.</p>
<section>
<h4 id="sec27"><a id="index_term1239"/><a id="index_term345"/><span class="blue">Symmetric Eigenvalue Decomposition</span></h4>
<p>Let’s start with symmetric matrices. Recall from <a href="C11_chapter6.xhtml#sec6_4">Section 6.4</a> that a symmetric matrix can always be taken apart using the eigenvalue decomposition into a product of the form</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:msup><m:mrow><m:mtext>A</m:mtext><m:mo>=</m:mo><m:mtext>RSR</m:mtext></m:mrow><m:mrow><m:mstyle><m:mrow><m:mtext>T</m:mtext></m:mrow></m:mstyle></m:mrow></m:msup></m:mrow></m:math>
</div>
<p>where <strong>R</strong> is an orthogonal matrix and <strong>S</strong> is a diagonal matrix; we will call the columns of <strong>R</strong> (the eigenvectors) by the names <strong>v</strong><sub>1</sub> and <strong>v</strong><sub>2</sub>, and we’ll call the diagonal entries of <strong>S</strong> (the eigenvalues) by the names λ<sub>1</sub> and λ<sub>2</sub>.</p>
<p>In geometric terms, we can now recognize <strong>R</strong> as a rotation and <strong>S</strong> as a scale, so this is just a multi-step geometric transformation (<a href="C12_chapter7.xhtml#f7_12">Figure 7.12</a>):</p>
<figure id="f7_12" tabindex="0">
<img alt="" src="../images/fig7_13.jpg"/>
<figcaption><p><span class="blue">Figure 7.12.</span> What happens when the unit circle is transformed by an arbitrary matrix <strong>A</strong>. The two perpendicular vectors <strong>v</strong><sub>1</sub> and <strong>v</strong><sub>2</sub>, which are the right singular vectors of <strong>A</strong>, get scaled and changed in direction to match the left singular vectors, <strong>u</strong><sub>1</sub> and <strong>u</strong><sub>2</sub>. In terms of elementary transformations, this can be seen as first rotating the right singular vectors to the canonical basis, doing an axis-aligned scale, and then rotating the canonical basis to the left singular vectors.</p></figcaption>
</figure>
<ol class="list-order">
<li>
<p class="list"><a id="term-278"/><a id="term-839"/><a id="term-931"/><span aria-label="137" epub:type="pagebreak" id="pg_137" role="doc-pagebreak"/>Rotate <strong>v</strong><sub>1</sub> and <strong>v</strong><sub>2</sub> to the <em>x</em>- and <em>y</em>-axes (the transform by <strong>R</strong><sup>T</sup>).</p>
</li>
<li>
<p class="list">Scale in <em>x</em> and <em>y</em> by (λ<sub>1</sub><em>,λ</em><sub>2</sub>) (the transform by <strong>S</strong>).</p>
</li>
<li>
<p class="list">Rotate the <em>x</em>- and <em>y</em>-axes back to <strong>v</strong><sub>1</sub> and <strong>v</strong><sub>2</sub> (the transform by <strong>R</strong>).</p>
</li>
</ol>
<aside class="boxed-text" epub:type="sidebar">
<p class="noindent">If you like to count dimensions: a symmetric 2 × 2 matrix has 3° of freedom, and the eigenvalue decomposition rewrites them as a rotation angle and two scale factors.</p>
</aside>
<p class="indent">Looking at the effect of these three transforms together, we can see that they have the effect of a <a id="index_term1245"/>nonuniform scale along a pair of axes. As with an axis-aligned scale, the axes are perpendicular, but they aren’t the coordinate axes; instead, they are the eigenvectors of <strong>A</strong>. This tells us something about what it means to be a symmetric matrix: symmetric matrices are just scaling operations—albeit potentially nonuniform and non–axis-aligned ones.</p>
<aside class="boxed-text-e" epub:type="sidebar">
<p class="noindent1"><span class="blue">Example 14</span> Recall the example from <a href="C11_chapter6.xhtml#sec6_4">Section 6.4</a>:</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mtable><m:mtr><m:mtd><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>2</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow></m:mtd><m:mtd><m:mo>=</m:mo></m:mtd><m:mtd columnalign="left"><m:mtext>R</m:mtext><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>λ</m:mi></m:mrow><m:mrow><m:mn>1</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:msub><m:mrow><m:mi>λ</m:mi></m:mrow><m:mrow><m:mn>2</m:mn></m:mrow></m:msub></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:msup><m:mrow><m:mtext>R</m:mtext></m:mrow><m:mrow><m:mtext>T</m:mtext></m:mrow></m:msup></m:mrow></m:mtd></m:mtr><m:mtr><m:mtd/><m:mtd><m:mo>=</m:mo></m:mtd><m:mtd columnalign="left"><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>0.8507</m:mn></m:mtd><m:mtd><m:mo>−</m:mo><m:mn>0.5257</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0.5257</m:mn></m:mtd><m:mtd><m:mn>0.8507</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>2.618</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0.382</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>0.8507</m:mn></m:mtd><m:mtd><m:mn>0.5257</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mo>−</m:mo><m:mn>0.5257</m:mn></m:mtd><m:mtd><m:mn>0.8507</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow></m:mrow></m:mrow></m:mtd></m:mtr><m:mtr><m:mtd/><m:mtd><m:mo>=</m:mo></m:mtd><m:mtd columnalign="left"><m:mtext>r</m:mtext><m:mtext>otate</m:mtext><m:mrow><m:mo>(</m:mo><m:mtext>31.7</m:mtext><m:mo>∘</m:mo><m:mo>)</m:mo><m:mtext>scale</m:mtext><m:mrow><m:mo>(</m:mo><m:mn>2.618</m:mn><m:mo>,</m:mo><m:mn>0.382</m:mn><m:mo>)</m:mo><m:mtext>rotate</m:mtext><m:mrow><m:mo>(</m:mo><m:mo>−</m:mo><m:mtext>31.7</m:mtext><m:mo>∘</m:mo><m:mo>)</m:mo></m:mrow></m:mrow></m:mrow><m:mn>.</m:mn></m:mtd></m:mtr></m:mtable></m:mrow></m:math>
</div>
<p>The matrix above, then, according to its eigenvalue decomposition, scales in a direction 31.7° counterclockwise from three o’clock (the <em>x</em>-axis). This is a touch before 2 p.m. on the clockface as is confirmed by <a href="C12_chapter7.xhtml#f7_13">Figure 7.13</a>.</p>
<figure id="f7_13" tabindex="0">
<img alt="" src="../images/fig7_14.jpg"/>
<figcaption><p><span class="blue">Figure 7.13.</span> A symmetric matrix is always a scale along some axis. In this case, it is along the ϕ = 31.7° direction which means the real eigenvector for this matrix is in that direction.</p></figcaption>
</figure>
<p><a id="term-840"/><a id="term-932"/><span aria-label="138" epub:type="pagebreak" id="pg_138" role="doc-pagebreak"/>We can also reverse the diagonalization process; to scale by (λ<sub>1</sub><em>,λ</em><sub>2</sub>) with the first scaling direction an angle ϕ clockwise from the <em>x</em>-axis, we have</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mtable><m:mtr><m:mtd><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtext>cos</m:mtext><m:mi>ϕ</m:mi></m:mtd><m:mtd><m:mtext>sin</m:mtext><m:mi>ϕ</m:mi></m:mtd></m:mtr><m:mtr><m:mtd><m:mo>−</m:mo><m:mtext>sin</m:mtext><m:mi>ϕ</m:mi></m:mtd><m:mtd><m:mtext>cos</m:mtext><m:mi>ϕ</m:mi></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>λ</m:mi></m:mrow><m:mrow><m:mn>1</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:msub><m:mrow><m:mi>λ</m:mi></m:mrow><m:mrow><m:mn>2</m:mn></m:mrow></m:msub></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtext>cos</m:mtext><m:mi>ϕ</m:mi></m:mtd><m:mtd><m:mo>−</m:mo><m:mtext>sin</m:mtext><m:mi>ϕ</m:mi></m:mtd></m:mtr><m:mtr><m:mtd><m:mtext>sin</m:mtext><m:mi>ϕ</m:mi></m:mtd><m:mtd><m:mtext>cos</m:mtext><m:mi>ϕ</m:mi></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow></m:mrow><m:mn>.</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>λ</m:mi></m:mrow><m:mrow><m:mn>1</m:mn></m:mrow></m:msub><m:msup><m:mrow><m:mtext>cos</m:mtext></m:mrow><m:mrow><m:mn>2</m:mn></m:mrow></m:msup><m:mi>ϕ</m:mi><m:mo>+</m:mo><m:msub><m:mrow><m:mi>λ</m:mi></m:mrow><m:mrow><m:mn>2</m:mn></m:mrow></m:msub><m:msup><m:mrow><m:mtext>sin</m:mtext></m:mrow><m:mrow><m:mn>2</m:mn></m:mrow></m:msup><m:mi>ϕ</m:mi><m:mo>⁢</m:mo><m:mtext> </m:mtext><m:mrow><m:mo>(</m:mo><m:msub><m:mrow><m:mi>λ</m:mi></m:mrow><m:mrow><m:mn>2</m:mn></m:mrow></m:msub><m:mo>−</m:mo><m:msub><m:mrow><m:mi>λ</m:mi></m:mrow><m:mrow><m:mn>1</m:mn></m:mrow></m:msub><m:mo>)</m:mo><m:mtext>cos</m:mtext><m:mi>ϕ</m:mi><m:mtext>sin</m:mtext><m:mi>ϕ</m:mi><m:mtext> </m:mtext></m:mrow></m:mtd></m:mtr><m:mtr><m:mtd><m:mrow><m:mo>(</m:mo><m:msub><m:mrow><m:mi>λ</m:mi></m:mrow><m:mrow><m:mn>2</m:mn></m:mrow></m:msub><m:mo>−</m:mo><m:msub><m:mrow><m:mi>λ</m:mi></m:mrow><m:mrow><m:mn>1</m:mn></m:mrow></m:msub><m:mo>)</m:mo><m:mtext>cos</m:mtext><m:mi>ϕ</m:mi><m:mtext>sin</m:mtext><m:mi>ϕ</m:mi><m:mtext> </m:mtext><m:msub><m:mrow><m:mi>λ</m:mi></m:mrow><m:mrow><m:mn>2</m:mn></m:mrow></m:msub><m:msup><m:mrow><m:mtext>cos</m:mtext></m:mrow><m:mrow><m:mn>2</m:mn></m:mrow></m:msup></m:mrow><m:mi>ϕ</m:mi><m:mo>+</m:mo><m:msup><m:mrow><m:msub><m:mrow><m:mi>λ</m:mi></m:mrow><m:mrow><m:mn>1</m:mn></m:mrow></m:msub><m:mtext>sin</m:mtext></m:mrow><m:mrow><m:mn>2</m:mn></m:mrow></m:msup><m:mi>ϕ</m:mi></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow></m:mtd></m:mtr></m:mtable></m:mrow></m:math>
</div>
<p>We should take heart that this is a symmetric matrix as we know must be true since we constructed it from a <a id="index_term1147"/>symmetric eigenvalue decomposition.</p>
</aside>
</section>
<section>
<h4 id="sec28"><a id="index_term1089"/><span class="blue">Singular Value Decomposition</span></h4>
<p>A very similar kind of decomposition can be done with nonsymmetric matrices as well: it’s the singular value decomposition (SVD), also discussed in <a href="C11_chapter6.xhtml#sec6_4_1">Section 6.4.1</a>. The difference is that the matrices on either side of the diagonal matrix are no longer the same:</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:msup><m:mrow><m:mtext>A=</m:mtext><m:mtext>USV</m:mtext></m:mrow><m:mrow><m:mtext>T</m:mtext></m:mrow></m:msup></m:mrow></m:math>
</div>
<p>The two orthogonal matrices that replace the single rotation <strong>R</strong> are called <strong>U</strong> and <strong>V</strong>, and their columns are called <strong>u</strong><em><sub>i</sub></em> (the <em>left singular vectors</em>) and <strong>v</strong><em><sub>i</sub></em> (the <em>right singular vectors</em>), respectively. In this context, the diagonal entries of <strong>S</strong> are called <em>singular values</em> rather than eigenvalues. The geometric interpretation is very similar to that of the symmetric eigenvalue decomposition (<a href="C12_chapter7.xhtml#f7_14">Figure 7.14</a>):</p>
<aside class="boxed-text" epub:type="sidebar">
<p class="noindent">For dimension counters: a general 2 × 2 matrix has 4° of freedom, and the SVD rewrites them as two rotation angles and two scale factors. One more bit is needed to keep track of reflections, but that doesn’t add a dimension.</p>
</aside>
<ol class="list-order">
<li>
<p class="list">Rotate <strong>v</strong><sub>1</sub> and <strong>v</strong><sub>2</sub> to the <em>x</em>- and <em>y</em>-axes (the transform by <strong>V</strong><sup>T</sup>).</p>
</li>
<li>
<p class="list">Scale in <em>x</em> and <em>y</em> by (<em>σ</em><sub>1</sub><em>,σ</em><sub>2</sub>) (the transform by <strong>S</strong>).</p>
</li>
<li>
<p class="list">Rotate the <em>x</em>- and <em>y</em>-axes to <strong>u</strong><sub>1</sub> and <strong>u</strong><sub>2</sub> (the transform by <strong>U</strong>).</p>
</li>
</ol>
<figure id="f7_14" tabindex="0">
<img alt="" src="../images/fig7_15.jpg"/>
<figcaption><p><span class="blue">Figure 7.14.</span> What happens when the unit circle is transformed by an arbitrary symmetric matrix <strong>A</strong>, also known as a non–axis-aligned, nonuniform scale. The two perpendicular vectors <strong>v</strong><sub>1</sub> and <strong>v</strong><sub>2</sub>, which are the eigenvectors of <strong>A</strong>, remain fixed in direction but get scaled. In terms of elementary transformations, this can be seen as first rotating the eigenvectors to the canonical basis, doing an axis-aligned scale, and then rotating the canonical basis back to the eigenvectors.</p></figcaption>
</figure>
<p class="noindent1"><span aria-label="139" epub:type="pagebreak" id="pg_139" role="doc-pagebreak"/>The principal difference is between a single rotation and two different orthogonal matrices. This difference causes another, less important, difference. Because the SVD has different singular vectors on the two sides, there is no need for negative singular values: we can always flip the sign of a singular value, reverse the direction of one of the associated singular vectors, and end up with the same transformation again. For this reason, the SVD always produces a diagonal matrix with all positive entries, but the matrices <strong>U</strong> and <strong>V</strong> are not guaranteed to be rotations—they could include reflection as well. In geometric applications like graphics, this is an inconvenience, but a minor one: it is easy to differentiate rotations from reflections by checking the determinant, which is +1 for rotations and <em>–</em>1 for reflections, and if rotations are desired, one of the singular values can be negated, resulting in a rotation–scale–rotation sequence where the reflection is rolled in with the scale, rather than with one of the rotations.</p>
<aside class="boxed-text-e" epub:type="sidebar">
<p class="noindent1"><span class="blue">Example 15</span> The example used in <a href="C11_chapter6.xhtml#sec6_4_1">Section 6.4.1</a> is in fact a shear matrix (<a href="C12_chapter7.xhtml#f7_15">Figure 7.15</a>):</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mtable><m:mtr><m:mtd><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow></m:mtd><m:mtd><m:mo>=</m:mo></m:mtd><m:mtd columnalign="left"><m:msub><m:mrow><m:mtext>R</m:mtext></m:mrow><m:mrow><m:mn>2</m:mn></m:mrow></m:msub><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>σ</m:mi></m:mrow><m:mrow><m:mn>1</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:msub><m:mrow><m:mi>σ</m:mi></m:mrow><m:mrow><m:mn>2</m:mn></m:mrow></m:msub></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:msub><m:mrow><m:mtext>R</m:mtext></m:mrow><m:mrow><m:mn>1</m:mn></m:mrow></m:msub></m:mrow></m:mtd></m:mtr><m:mtr><m:mtd/><m:mtd><m:mo>=</m:mo></m:mtd><m:mtd columnalign="left"><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>0.8507</m:mn></m:mtd><m:mtd><m:mo>−</m:mo><m:mn>0.5257</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0.5257</m:mn></m:mtd><m:mtd><m:mn>0.8507</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>1.618</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0.618</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>0.5257</m:mn></m:mtd><m:mtd><m:mn>0.8507</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mo>−</m:mo><m:mn>0.8507</m:mn></m:mtd><m:mtd><m:mn>0.5257</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow></m:mrow></m:mrow></m:mtd></m:mtr><m:mtr><m:mtd/><m:mtd><m:mo>=</m:mo></m:mtd><m:mtd columnalign="left"><m:mtext>rotate</m:mtext><m:mrow><m:mo>(</m:mo><m:mtext>31.7</m:mtext><m:mo>∘</m:mo><m:mo>)</m:mo><m:mtext>scale</m:mtext><m:mrow><m:mo>(</m:mo><m:mn>1.618</m:mn><m:mo>,</m:mo><m:mn>0.618</m:mn><m:mo>)</m:mo><m:mtext>rotate</m:mtext><m:mrow><m:mo>(</m:mo><m:mo>−</m:mo><m:mn>58.3</m:mn><m:mo>∘</m:mo><m:mo>)</m:mo><m:mn>.</m:mn></m:mrow></m:mrow></m:mrow></m:mtd></m:mtr></m:mtable></m:mrow></m:math></div>
<p>An immediate consequence of the existence of SVD is that all the 2D transformation matrices we have seen can be made from rotation matrices and scale matrices. Shear matrices are a convenience, but they are not required for expressing transformations.</p>
</aside>
<p class="indentt">In summary, every matrix can be decomposed via SVD into a rotation times a scale times another rotation. Only symmetric matrices can be decomposed via eigenvalue diagonalization into a rotation times a scale times the inverse-rotation, and such matrices are a simple scale in an arbitrary direction. The SVD of a symmetric matrix will yield the same triple product as eigenvalue decomposition via a slightly more complex algebraic manipulation.</p>
<figure id="f7_15" tabindex="0">
<img alt="" src="../images/fig7_12.jpg"/>
<figcaption><p><span class="blue">Figure 7.15.</span> <a id="term-258"/><a id="term-928"/><span aria-label="140" epub:type="pagebreak" id="pg_140" role="doc-pagebreak"/>Singular Value Decomposition (SVD) for a shear matrix. Any 2D matrix can be decomposed into a product of rotation, scale, rotation. Note that the circular face of the clock must become an ellipse because it is just a rotated and scaled circle.</p></figcaption>
</figure>
</section>
<section>
<h4 id="sec29"><span class="blue">Paeth Decomposition of Rotations</span></h4>
<p>Another decomposition uses shears to represent nonzero rotations (Paeth, 1990). The following identity allows this:</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtext>cos</m:mtext><m:mi>ϕ</m:mi></m:mtd><m:mtd><m:mo>−</m:mo><m:mtext>sin</m:mtext><m:mi>ϕ</m:mi></m:mtd></m:mtr><m:mtr><m:mtd><m:mtext>sin</m:mtext><m:mi>ϕ</m:mi></m:mtd><m:mtd><m:mtext>cos</m:mtext><m:mi>ϕ</m:mi></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mfrac><m:mrow><m:mtext>cos</m:mtext><m:mi>ϕ</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow><m:mrow><m:mtext>sin</m:mtext><m:mi>ϕ</m:mi></m:mrow></m:mfrac></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mtext>sin</m:mtext><m:mi>ϕ</m:mi></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mfrac><m:mrow><m:mtext>cos</m:mtext><m:mi>ϕ</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow><m:mrow><m:mtext>sin</m:mtext><m:mi>ϕ</m:mi></m:mrow></m:mfrac></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mn>.</m:mn></m:mrow></m:mrow></m:mrow></m:mrow></m:math>
</div>
<p>For example, a rotation by <em>π/</em>4 (45°) is (see <a href="C12_chapter7.xhtml#f7_16">Figure 7.16</a>)</p>
<div class="disp-formula" id="equ7_2">
<m:math alttext=""><m:mrow><m:mtext>rotate</m:mtext><m:mrow><m:mrow><m:mo>(</m:mo><m:mfrac><m:mrow><m:mi>π</m:mi></m:mrow><m:mrow><m:mn>4</m:mn></m:mrow></m:mfrac><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mn>1</m:mn><m:mo>−</m:mo><m:msqrt><m:mrow><m:mn>2</m:mn></m:mrow></m:msqrt></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow></m:mrow><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mfrac><m:mrow><m:msqrt><m:mrow><m:mn>2</m:mn></m:mrow></m:msqrt></m:mrow><m:mrow><m:mn>2</m:mn></m:mrow></m:mfrac></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mn>1</m:mn><m:mo>−</m:mo><m:msqrt><m:mrow><m:mn>2</m:mn></m:mrow></m:msqrt></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mn>.</m:mn></m:mrow></m:mrow></m:mrow><m:mspace width="3em"/><m:mo>(7.2)</m:mo></m:math>
</div>
<p>This particular transform is useful for raster rotation because shearing is a very efficient raster operation for images; it introduces some jagginess, but will leave no holes. The key observation is that if we take a raster position (<em>i, j</em>) and apply a horizontal shear to it, we get</p>
<figure id="f7_16" tabindex="0">
<img alt="" src="../images/fig7_16.jpg"/>
<figcaption><p><span class="blue">Figure 7.16.</span> <a id="term-799"/><a id="term-929"/><span aria-label="141" epub:type="pagebreak" id="pg_141" role="doc-pagebreak"/>Any 2D rotation can be accomplished by three shears in sequence. In this case, a rotation by 45° is decomposed as shown in Equation 7.2.</p></figcaption>
</figure>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mi>s</m:mi></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mi>i</m:mi></m:mtd></m:mtr><m:mtr><m:mtd><m:mi>j</m:mi></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>1</m:mn><m:mo>+</m:mo><m:mi>s</m:mi><m:mi>j</m:mi></m:mtd></m:mtr><m:mtr><m:mtd><m:mi>j</m:mi></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow><m:mn>.</m:mn></m:mrow></m:mrow></m:mrow></m:math>
</div>
<p>If we round <em>sj</em> to the nearest integer, this amounts to taking each row in the image and moving it sideways by some amount—a different amount for each row. Because it is the same displacement within a row, this allows us to rotate with no gaps in the resulting image. A similar action works for a vertical shear. Thus, we can implement a simple raster rotation easily.</p>
</section>
</section>
</section>
<section>
<h2 id="sec7_2"><a id="index_term1195"/><a id="index_term1252"/><a id="index_term696"/><a epub:type="backlink" href="C02a_toc.xhtml#rsec7_2" role="doc-backlink"><span class="green">7.2 3D Linear Transformations</span></a></h2>
<p>The linear 3D transforms are an extension of the 2D transforms. For example, a scale along Cartesian axes is</p>
<div class="disp-formula" id="equ7_3">
<m:math alttext=""><m:mrow><m:mtext>scale</m:mtext><m:mrow><m:mo>(</m:mo><m:msub><m:mrow><m:mi>s</m:mi></m:mrow><m:mrow><m:mi>x</m:mi></m:mrow></m:msub><m:mo>,</m:mo><m:msub><m:mrow><m:mi>s</m:mi></m:mrow><m:mrow><m:mi>y</m:mi></m:mrow></m:msub><m:mo>,</m:mo><m:msub><m:mrow><m:mi>s</m:mi></m:mrow><m:mrow><m:mi>z</m:mi></m:mrow></m:msub><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>s</m:mi></m:mrow><m:mrow><m:mi>x</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:msub><m:mrow><m:mi>s</m:mi></m:mrow><m:mrow><m:mi>y</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:msub><m:mrow><m:mi>s</m:mi></m:mrow><m:mrow><m:mi>z</m:mi></m:mrow></m:msub></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mn>.</m:mn></m:mrow></m:mrow><m:mspace width="3em"/><m:mo>(7.3)</m:mo></m:math>
</div>
<p><a id="term-942"/><span aria-label="142" epub:type="pagebreak" id="pg_142" role="doc-pagebreak"/><a id="index_term1249"/>Rotation is considerably more complicated in 3D than in 2D, because there are more possible axes of rotation. However, if we simply want to rotate about the <em>z</em>-axis, which will only change <em>x</em>- and <em>y</em>-coordinates, we can use the 2D rotation matrix with no operation on <em>z</em>:</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mtext>rotate-z</m:mtext><m:mrow><m:mrow><m:mo>(</m:mo><m:mi>ϕ</m:mi><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtext>cos</m:mtext><m:mi>ϕ</m:mi></m:mtd><m:mtd><m:mo>−</m:mo><m:mtext>sin</m:mtext><m:mi>ϕ</m:mi></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mtext>sin</m:mtext><m:mi>ϕ</m:mi></m:mtd><m:mtd><m:mtext>cos</m:mtext><m:mi>ϕ</m:mi></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mn>.</m:mn></m:mrow></m:mrow></m:mrow></m:math>
</div>
<p>Similarly we can construct matrices to rotate about the <em>x</em>-axis and the <em>y</em>-axis:</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mtext>rotate-x</m:mtext><m:mrow><m:mrow><m:mo>(</m:mo><m:mi>φ</m:mi><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mtext>cos</m:mtext><m:mi>φ</m:mi></m:mtd><m:mtd><m:mtext>sin</m:mtext><m:mi>φ</m:mi></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mtext>sin</m:mtext><m:mi>φ</m:mi></m:mtd><m:mtd><m:mtext>cos</m:mtext><m:mi>φ</m:mi></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mo>,</m:mo></m:mrow></m:mrow></m:mrow></m:math>
</div>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mtext>rotate-y</m:mtext><m:mrow><m:mrow><m:mo>(</m:mo><m:mi>ϕ</m:mi><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtext>cos</m:mtext><m:mi>ϕ</m:mi></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mtext>sin</m:mtext><m:mi>ϕ</m:mi></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mo>−</m:mo><m:mi>sin</m:mi><m:mo>⁡</m:mo><m:mtext> </m:mtext><m:mi>ϕ</m:mi></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mtext>cos</m:mtext><m:mi>ϕ</m:mi></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mn>.</m:mn></m:mrow></m:mrow></m:mrow></m:math>
</div>
<aside class="boxed-text" epub:type="sidebar">
<p class="noindent">To understand why the minus sign is in the lower left for the <em>y</em>-axis rotation, think of the three axes in a circular sequence: <em>y</em> after <em>x</em>; <em>z</em> after <em>y</em>; <em>x</em> after <em>z</em>.</p>
</aside>
<p class="noindent">We will discuss rotations about arbitrary axes in the next section.</p>
<p>As in two dimensions, we can shear along a particular axis, for example,</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mtext>shear-x</m:mtext><m:mrow><m:mrow><m:mo>(</m:mo><m:msub><m:mrow><m:mi>d</m:mi></m:mrow><m:mrow><m:mi>y</m:mi></m:mrow></m:msub><m:mo>,</m:mo><m:msub><m:mrow><m:mi>d</m:mi></m:mrow><m:mrow><m:mi>z</m:mi></m:mrow></m:msub><m:mo>)</m:mo></m:mrow><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:msub><m:mrow><m:mi>d</m:mi></m:mrow><m:mrow><m:mi>y</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>d</m:mi></m:mrow><m:mrow><m:mi>z</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mn>.</m:mn></m:mrow></m:mrow></m:mrow></m:math>
</div>
<p>As with 2D transforms, any 3D transformation matrix can be decomposed using SVD into a rotation, scale, and another rotation. Any symmetric 3D matrix has an eigenvalue decomposition into rotation, scale, and inverse-rotation. Finally, a <a id="index_term1200"/>3D rotation can be decomposed into a product of 3D shear matrices.</p>
<section>
<h3 id="sec7_2_1"><span class="green">7.2.1 Arbitrary 3D Rotations</span></h3>
<p>As in 2D, 3D rotations are <em>orthogonal</em> matrices. Geometrically, this means that the three rows of the matrix are the Cartesian coordinates of three mutually orthogonal unit vectors as discussed in <a href="C07_chapter2.xhtml#sec2_4_5">Section 2.4.5</a>. The columns are three, potentially different, mutually orthogonal unit vectors. There are an infinite number of such rotation matrices. Let’s write down such a matrix:</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:msub><m:mrow><m:mtext>R</m:mtext></m:mrow><m:mrow><m:mi>u</m:mi><m:mi>v</m:mi><m:mi>w</m:mi></m:mrow></m:msub><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>v</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>v</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>v</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>w</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>w</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>w</m:mi></m:mrow></m:msub></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mn>.</m:mn></m:mrow></m:mrow></m:math>
</div>
<p><span aria-label="143" epub:type="pagebreak" id="pg_143" role="doc-pagebreak"/>Here, <strong>u</strong> = <em>x<sub>u</sub></em><strong>x</strong> + <em>y<sub>u</sub></em><strong>y</strong> + <em>z<sub>u</sub></em><strong>z</strong> and so on for <strong>v</strong> and <strong>w</strong>. Since the three vectors are orthonormal, we know that</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mtable><m:mtr><m:mtd><m:mtext>u</m:mtext><m:mo>·</m:mo><m:mtext>u</m:mtext><m:mo>=</m:mo><m:mtext>v</m:mtext><m:mo>·</m:mo><m:mtext>v =</m:mtext><m:mtext>w</m:mtext><m:mo>·</m:mo><m:mtext>w = 1,</m:mtext></m:mtd></m:mtr><m:mtr><m:mtd><m:mtext>u</m:mtext><m:mo>·</m:mo><m:mtext>v</m:mtext><m:mo>=</m:mo><m:mtext>v</m:mtext><m:mo>·</m:mo><m:mtext>w</m:mtext><m:mtext>=</m:mtext><m:mtext>w</m:mtext><m:mo>·</m:mo><m:mtext>u</m:mtext><m:mtext>= 0.</m:mtext></m:mtd></m:mtr><m:mtr><m:mtd/></m:mtr></m:mtable></m:mrow></m:math>
</div>
<p>We can infer some of the behavior of the rotation matrix by applying it to the vectors <strong>u</strong>, <strong>v</strong> and <strong>w</strong>. For example,</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:msub><m:mrow><m:mi>R</m:mi></m:mrow><m:mrow><m:mi>u</m:mi><m:mi>v</m:mi><m:mi>w</m:mi></m:mrow></m:msub><m:mtext>u</m:mtext><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>v</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>v</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>v</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>w</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>w</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>w</m:mi></m:mrow></m:msub></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub></m:mtd></m:mtr></m:mtable></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub><m:mo>+</m:mo><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub><m:mo>+</m:mo><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>v</m:mi></m:mrow></m:msub><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub><m:mo>+</m:mo><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>v</m:mi></m:mrow></m:msub><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub><m:mo>+</m:mo><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>v</m:mi></m:mrow></m:msub><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub></m:mtd></m:mtr></m:mtable></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>w</m:mi></m:mrow></m:msub><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub><m:mo>+</m:mo><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>w</m:mi></m:mrow></m:msub><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub><m:mo>+</m:mo><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>w</m:mi></m:mrow></m:msub><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mn>.</m:mn></m:mrow></m:mrow></m:mrow></m:mrow></m:math>
</div>
<p>Note that those three rows of R<sub><em>uvw</em></sub>u are all dot products:</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:msub><m:mrow><m:mtext>R</m:mtext></m:mrow><m:mrow><m:mi>u</m:mi><m:mi>v</m:mi><m:mi>w</m:mi></m:mrow></m:msub><m:mtext>u</m:mtext><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtext>u</m:mtext><m:mo>·</m:mo><m:mtext>u</m:mtext></m:mtd></m:mtr><m:mtr><m:mtd><m:mtable><m:mtr><m:mtd><m:mtext>v</m:mtext><m:mo>·</m:mo><m:mtext>u</m:mtext></m:mtd></m:mtr><m:mtr><m:mtd><m:mtext>w</m:mtext><m:mo>·</m:mo><m:mtext>u</m:mtext></m:mtd></m:mtr><m:mtr><m:mtd/></m:mtr><m:mtr><m:mtd/></m:mtr></m:mtable></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtable><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr></m:mtable></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow><m:mo>=</m:mo><m:mtext>x.</m:mtext></m:mrow></m:math>
</div>
<p>Similarly, <strong>R</strong><em><sub>uvw</sub></em><strong>v</strong> = <strong>y</strong>, and <strong>R</strong><em><sub>uvw</sub></em><strong>w</strong> = <strong>z</strong>. So <strong>R</strong><em><sub>uvw</sub></em> takes the basis <strong>uvw</strong> to the corresponding Cartesian axes via rotation.</p>
<p>If <strong>R</strong><em><sub>uvw</sub></em> is a rotation matrix with orthonormal rows, then <strong>R</strong><sup>T</sup><em><sub>uvw</sub></em> is also a rotation matrix with orthonormal columns and in fact is the inverse of <strong>R</strong><em><sub>uvw</sub></em> (the inverse of an <a id="index_term808"/>orthogonal matrix is always its transpose). An important point is that for transformation matrices, the algebraic inverse is also the geometric inverse. So if <strong>R</strong><em><sub>uvw</sub></em> takes <strong>u</strong> to <strong>x</strong>, then <strong>R</strong><sup>T</sup><em><sub>uvw</sub></em> takes <strong>x</strong> to <strong>u</strong>. The same should be true of <strong>v</strong> and <strong>y</strong> as we can confirm:</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:msubsup><m:mrow><m:mtext>R</m:mtext></m:mrow><m:mrow><m:mi>u</m:mi><m:mi>v</m:mi><m:mi>w</m:mi></m:mrow><m:mrow><m:mtext>T</m:mtext></m:mrow></m:msubsup><m:mtext>y</m:mtext><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>v</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>w</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>v</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>w</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>v</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>w</m:mi></m:mrow></m:msub></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtable><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>v</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>v</m:mi></m:mrow></m:msub></m:mtd></m:mtr></m:mtable></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>v</m:mi></m:mrow></m:msub></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mo>=</m:mo><m:mtext>v.</m:mtext></m:mrow></m:mrow></m:mrow></m:mrow></m:math>
</div>
<p>So we can always create rotation matrices from orthonormal bases.</p>
<p>If we wish to rotate about an arbitrary vector <strong>a</strong>, we can form an orthonormal basis with <strong>w</strong> = <strong>a</strong>, rotate that basis to the canonical basis <strong>xyz</strong>, rotate about the <em>z</em>-axis, and then rotate the canonical basis back to the <strong>uvw</strong> basis. In matrix form, to rotate about the <em>w</em>-axis by an angle ϕ:</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>v</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>w</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>v</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>w</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>v</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>w</m:mi></m:mrow></m:msub></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtext>cos</m:mtext><m:mi>ϕ</m:mi></m:mtd><m:mtd><m:mo>−</m:mo><m:mtext>sin</m:mtext><m:mi>ϕ</m:mi></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mtext>sin</m:mtext><m:mi>ϕ</m:mi></m:mtd><m:mtd><m:mtext>cos</m:mtext><m:mi>ϕ</m:mi></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>v</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>v</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>v</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>w</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>w</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>w</m:mi></m:mrow></m:msub></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mn>.</m:mn></m:mrow></m:mrow></m:mrow></m:mrow></m:math>
</div>
<p>Here, we have <strong>w</strong> a unit vector in the direction of <strong>a</strong> (i.e., <strong>a</strong> divided by its own length). But what are <strong>u</strong> and <strong>v</strong>? A method to find reasonable <strong>u</strong> and <strong>v</strong> is given in <a href="C07_chapter2.xhtml#sec2_4_6">Section 2.4.6</a>.</p>
<p><a id="term-835"/><a id="term-836"/><a id="term-936"/><span aria-label="144" epub:type="pagebreak" id="pg_144" role="doc-pagebreak"/>If we have a rotation matrix and we wish to have the rotation in axis-angle form, we can compute the one real eigenvalue (which will be λ = 1), and the corresponding eigenvector is the axis of rotation. This is the one axis that is not changed by the rotation.</p>
<p>See <a href="C21_chapter16.xhtml#sec16_2_2">Section 16.2.2</a> for a comparison of the few most-used ways to represent rotations, besides rotation matrices.</p>
</section>
<section>
<h3 id="sec7_2_2"><a id="index_term1246"/><span class="green">7.2.2 Transforming Normal Vectors</span></h3>
<p>While most 3D vectors we use represent positions (offset vectors from the origin) or directions, such as where light comes from, some vectors represent <em>surface normals</em>. <a id="index_term1142"/>Surface normal vectors are perpendicular to the tangent plane of a surface. These normals do not transform the way we would like when the underlying surface is transformed. For example, if the points of a surface are transformed by a matrix <strong>M</strong>, a vector <strong>t</strong> that is tangent to the surface and is multiplied by <strong>M</strong> will be tangent to the transformed surface. However, a surface normal vector <strong>n</strong> that is transformed by <strong>M</strong> may not be normal to the transformed surface (<a href="C12_chapter7.xhtml#f7_17">Figure 7.17</a>).</p>
<p>We can derive a transform matrix <strong>N</strong> which does take <strong>n</strong> to a vector perpendicular to the transformed surface. One way to attack this issue is to note that a surface normal vector and a tangent vector are perpendicular, so their dot product is zero, which is expressed in matrix form as</p>
<div class="disp-formula" id="equ7_4">
<m:math alttext=""><m:mrow><m:msup><m:mrow><m:mtext>n</m:mtext></m:mrow><m:mrow><m:mtext>T</m:mtext></m:mrow></m:msup><m:mtext>t</m:mtext><m:mo>=</m:mo><m:mn>0.</m:mn></m:mrow><m:mspace width="3em"/><m:mo>(7.4)</m:mo></m:math>
</div>
<p>If we denote the desired transformed vectors as <strong>t</strong><em><sub>M</sub></em> = <strong>Mt</strong> and <strong>n</strong><em><sub>N</sub></em> = <strong>Nn</strong>, our goal is to find <strong>N</strong> such that <span class="inline-formula"><m:math alttext=""><m:mrow><m:mtext> </m:mtext><m:msubsup><m:mrow><m:mtext>n</m:mtext></m:mrow><m:mrow><m:mi>N</m:mi></m:mrow><m:mrow><m:mtext>T</m:mtext></m:mrow></m:msubsup><m:msub><m:mrow><m:mtext>t</m:mtext></m:mrow><m:mrow><m:mi>M</m:mi></m:mrow></m:msub><m:mo>=</m:mo><m:mn>0</m:mn></m:mrow></m:math></span>. We can find <strong>N</strong> by some algebraic tricks.</p>
<figure id="f7_17" tabindex="0">
<img alt="" src="../images/fig7_17.jpg"/>
<figcaption><p><span class="blue">Figure 7.17.</span> When a normal vector is transformed using the same matrix that transforms the points on an object, the resulting vector may not be perpendicular to the surface as is shown here for the sheared rectangle. The tangent vector, however, does transform to a vector tangent to the transformed surface.</p></figcaption>
</figure>
<p><span aria-label="145" epub:type="pagebreak" id="pg_145" role="doc-pagebreak"/>First, we can sneak an identity matrix into the dot product and then take advantage of <strong>M</strong><sup>–1</sup><strong>M</strong> = <strong>I</strong>:</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:msup><m:mrow><m:mtext>n</m:mtext></m:mrow><m:mrow><m:mtext>T</m:mtext></m:mrow></m:msup><m:mtext>t</m:mtext><m:mo>=</m:mo><m:msup><m:mrow><m:mtext>n</m:mtext></m:mrow><m:mrow><m:mtext>T</m:mtext></m:mrow></m:msup><m:mstyle><m:mrow><m:mtext>I</m:mtext></m:mrow></m:mstyle><m:mtext>t</m:mtext><m:mo>=</m:mo><m:msup><m:mrow><m:msup><m:mrow><m:mtext>n</m:mtext></m:mrow><m:mrow><m:mtext>T</m:mtext></m:mrow></m:msup><m:mtext>M</m:mtext></m:mrow><m:mrow><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:msup><m:mtext>Mt</m:mtext><m:mo>=</m:mo><m:mn>0.</m:mn></m:mrow></m:math>
</div>
<p>Although the manipulations above don’t obviously get us anywhere, note that we can add parentheses that make the above expression more obviously a dot product:</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mrow><m:mo>(</m:mo><m:msup><m:mrow><m:mtext>n</m:mtext></m:mrow><m:mrow><m:mtext>T</m:mtext></m:mrow></m:msup><m:msup><m:mrow><m:mtext>M</m:mtext></m:mrow><m:mrow><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:msup><m:mo>)</m:mo><m:mrow><m:mo>(</m:mo><m:mtext>Mt</m:mtext><m:mo>)</m:mo><m:mo>=</m:mo><m:mo>(</m:mo><m:msup><m:mrow><m:mtext>n</m:mtext></m:mrow><m:mrow><m:mtext>T</m:mtext></m:mrow></m:msup><m:msup><m:mrow><m:mtext>M</m:mtext></m:mrow><m:mrow><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:msup><m:mo>)</m:mo><m:msub><m:mrow><m:mtext>t</m:mtext></m:mrow><m:mrow><m:mi>M</m:mi></m:mrow></m:msub><m:mo>=</m:mo><m:mn>0.</m:mn></m:mrow></m:mrow></m:mrow></m:math>
</div>
<p>This means that the row vector that is perpendicular to <strong>t</strong><em><sub>M</sub></em> is the left part of the expression above. This expression holds for any of the tangent vectors in the tangent plane. Since there is only one direction in 3D (and its opposite) that is perpendicular to all such tangent vectors, we know that the left part of the expression above must be the row vector expression for <strong>n</strong><em><sub>N</sub></em> ; i.e., it is <strong>n</strong><sup>T</sup><em><sub>N</sub></em> , so this allows us to infer <strong>N</strong>:</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:msup><m:mrow><m:msubsup><m:mrow><m:mtext>n</m:mtext></m:mrow><m:mrow><m:mi>N</m:mi></m:mrow><m:mrow><m:mtext>T</m:mtext></m:mrow></m:msubsup><m:mo>=</m:mo><m:msup><m:mrow><m:mtext>n</m:mtext></m:mrow><m:mrow><m:mtext>T</m:mtext></m:mrow></m:msup><m:mtext>M</m:mtext></m:mrow><m:mrow><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:msup><m:mo>,</m:mo></m:mrow></m:math>
</div>
<p>so we can take the transpose of that to get</p>
<div class="disp-formula" id="equ7_5">
<m:math alttext=""><m:mrow><m:msup><m:mrow><m:msub><m:mrow><m:mtext>n</m:mtext></m:mrow><m:mrow><m:mi>N</m:mi></m:mrow></m:msub><m:mo>=</m:mo><m:mrow><m:mo>(</m:mo><m:msup><m:mrow><m:mtext>n</m:mtext></m:mrow><m:mrow><m:mtext>T</m:mtext></m:mrow></m:msup><m:msup><m:mrow><m:mtext>M</m:mtext></m:mrow><m:mrow><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:msup><m:mo>)</m:mo></m:mrow></m:mrow><m:mrow><m:mtext>T</m:mtext></m:mrow></m:msup><m:mo>=</m:mo><m:msup><m:mrow><m:mo>(</m:mo><m:msup><m:mrow><m:mtext>M</m:mtext></m:mrow><m:mrow><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:msup><m:mo>)</m:mo></m:mrow><m:mrow><m:mtext>T</m:mtext></m:mrow></m:msup><m:mtext>n.</m:mtext></m:mrow><m:mspace width="3em"/><m:mo>(7.5)</m:mo></m:math>
</div>
<p>Therefore, we can see that the matrix that correctly transforms normal vectors so they remain normal is <strong>N</strong> = (<strong>M</strong><sup>–1</sup>)<sup>T</sup>, i.e., the transpose of the inverse matrix. Since this matrix may change the length of <strong>n</strong>, we can multiply it by an arbitrary scalar and it will still produce <strong>n</strong><em><sub>N</sub></em> with the right direction. Recall from <a href="C11_chapter6.xhtml#sec6_3">Section 6.3</a> that the inverse of a matrix is the transpose of the cofactor matrix divided by the determinant. Because we don’t care about the length of a normal vector, we can skip the division and find that for a 3 × 3 matrix,</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mtext>N</m:mtext><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:msubsup><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>11</m:mn></m:mrow><m:mrow><m:mi>c</m:mi></m:mrow></m:msubsup></m:mtd><m:mtd><m:msubsup><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>12</m:mn></m:mrow><m:mrow><m:mi>c</m:mi></m:mrow></m:msubsup></m:mtd><m:mtd><m:msubsup><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>13</m:mn></m:mrow><m:mrow><m:mi>c</m:mi></m:mrow></m:msubsup></m:mtd></m:mtr><m:mtr><m:mtd><m:msubsup><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>21</m:mn></m:mrow><m:mrow><m:mi>c</m:mi></m:mrow></m:msubsup></m:mtd><m:mtd><m:msubsup><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>22</m:mn></m:mrow><m:mrow><m:mi>c</m:mi></m:mrow></m:msubsup></m:mtd><m:mtd><m:msubsup><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>23</m:mn></m:mrow><m:mrow><m:mi>c</m:mi></m:mrow></m:msubsup></m:mtd></m:mtr><m:mtr><m:mtd><m:msubsup><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>31</m:mn></m:mrow><m:mrow><m:mi>c</m:mi></m:mrow></m:msubsup></m:mtd><m:mtd><m:msubsup><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>32</m:mn></m:mrow><m:mrow><m:mi>c</m:mi></m:mrow></m:msubsup></m:mtd><m:mtd><m:msubsup><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>33</m:mn></m:mrow><m:mrow><m:mi>c</m:mi></m:mrow></m:msubsup></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mn>.</m:mn></m:mrow></m:mrow></m:math>
</div>
<p>This assumes the element of <strong>M</strong> in row <em>i</em> and column <em>j</em> is <em>m<sub>ij</sub></em>. So the full expression for <strong>N</strong> is</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mtext>N</m:mtext><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>22</m:mn></m:mrow></m:msub><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>33</m:mn></m:mrow></m:msub><m:mo>−</m:mo><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>23</m:mn></m:mrow></m:msub><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>32</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>23</m:mn></m:mrow></m:msub><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>31</m:mn></m:mrow></m:msub><m:mo>−</m:mo><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>21</m:mn></m:mrow></m:msub><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>33</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>21</m:mn></m:mrow></m:msub><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>32</m:mn></m:mrow></m:msub><m:mo>−</m:mo><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>22</m:mn></m:mrow></m:msub><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>31</m:mn></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>13</m:mn></m:mrow></m:msub><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>32</m:mn></m:mrow></m:msub><m:mo>−</m:mo><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>12</m:mn></m:mrow></m:msub><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>33</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>11</m:mn></m:mrow></m:msub><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>33</m:mn></m:mrow></m:msub><m:mo>−</m:mo><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>13</m:mn></m:mrow></m:msub><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>31</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>12</m:mn></m:mrow></m:msub><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>31</m:mn></m:mrow></m:msub><m:mo>−</m:mo><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>11</m:mn></m:mrow></m:msub><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>32</m:mn></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>12</m:mn></m:mrow></m:msub><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>23</m:mn></m:mrow></m:msub><m:mo>−</m:mo><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>13</m:mn></m:mrow></m:msub><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>22</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>13</m:mn></m:mrow></m:msub><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>21</m:mn></m:mrow></m:msub><m:mo>−</m:mo><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>11</m:mn></m:mrow></m:msub><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>23</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>11</m:mn></m:mrow></m:msub><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>22</m:mn></m:mrow></m:msub><m:mo>−</m:mo><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>12</m:mn></m:mrow></m:msub><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>21</m:mn></m:mrow></m:msub></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow><m:mn>.</m:mn></m:mrow></m:math>
</div>
</section>
</section>
<section>
<h2 id="sec7_3"><a id="index_term1254"/><a id="index_term1234"/><span aria-label="146" epub:type="pagebreak" id="pg_146" role="doc-pagebreak"/><a epub:type="backlink" href="C02a_toc.xhtml#rsec7_3" role="doc-backlink"><span class="green">7.3 Translation and Affine Transformations</span></a></h2>
<p>We have been looking at methods to change vectors using a matrix <strong>M</strong>. In two dimensions, these transforms have the form</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mtable><m:mtr><m:mtd><m:mi>x</m:mi><m:mo>′</m:mo></m:mtd><m:mtd><m:mo>=</m:mo></m:mtd><m:mtd><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>11</m:mn></m:mrow></m:msub><m:mi>x</m:mi></m:mtd><m:mtd><m:mo>+</m:mo></m:mtd><m:mtd><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>12</m:mn></m:mrow></m:msub><m:mi>y</m:mi><m:mo>,</m:mo></m:mtd></m:mtr><m:mtr><m:mtd><m:mi>y</m:mi><m:mo>′</m:mo></m:mtd><m:mtd><m:mo>=</m:mo></m:mtd><m:mtd><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>21</m:mn></m:mrow></m:msub><m:mi>x</m:mi></m:mtd><m:mtd><m:mo>+</m:mo></m:mtd><m:mtd><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>22</m:mn></m:mrow></m:msub><m:mi>y</m:mi><m:mn>.</m:mn></m:mtd></m:mtr></m:mtable></m:mrow></m:math>
</div>
<p>We cannot use such transforms to <em>move</em> objects, only to scale and rotate them. In particular, the origin (0, 0) always remains fixed under a linear transformation. To move, or <em>translate</em>, an object by shifting all its points the same amount, we need a transform of the form</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mtable><m:mtr><m:mtd><m:mi>x</m:mi><m:mo>′</m:mo></m:mtd><m:mtd><m:mo>=</m:mo></m:mtd><m:mtd><m:mi>x</m:mi></m:mtd><m:mtd><m:mo>+</m:mo></m:mtd><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>t</m:mi></m:mrow></m:msub><m:mo>,</m:mo></m:mtd></m:mtr><m:mtr><m:mtd><m:mi>y</m:mi><m:mo>′</m:mo></m:mtd><m:mtd><m:mo>=</m:mo></m:mtd><m:mtd><m:mi>y</m:mi></m:mtd><m:mtd><m:mo>+</m:mo></m:mtd><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>t</m:mi></m:mrow></m:msub><m:mn>.</m:mn></m:mtd></m:mtr></m:mtable></m:mrow></m:math>
</div>
<p>There is just no way to do that by multiplying (<em>x, y</em>) by a 2 × 2 matrix. One possibility for adding translation to our system of linear transformations is to simply associate a separate translation vector with each transformation matrix, letting the matrix take care of scaling and rotation and the vector take care of translation. This is perfectly feasible, but the bookkeeping is awkward and the rule for composing two transformations is not as simple and clean as with linear transformations.</p>
<p>Instead, we can use a clever trick to get a single matrix multiplication to do both operations together. The idea is simple: represent the point (<em>x, y</em>) by a 3D vector [<em>x y</em> 1]<sup>T</sup>, and use 3 × 3 matrices of the form</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>11</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>12</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>t</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>21</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>22</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>t</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mn>.</m:mn></m:mrow></m:mrow></m:math>
</div>
<p>The fixed third row serves to copy the 1 into the transformed vector, so that all vectors have a 1 in the last place, and the first two rows compute <em>x<sup/></em> and <em>y<sup/></em> as linear combinations of <em>x</em>, <em>y</em>,and 1:</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtable><m:mtr><m:mtd><m:mi>x</m:mi><m:mo>′</m:mo></m:mtd></m:mtr><m:mtr><m:mtd><m:mi>y</m:mi><m:mo>′</m:mo></m:mtd></m:mtr></m:mtable></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>11</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>12</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>t</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>21</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>22</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>t</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtable><m:mtr><m:mtd><m:mi>x</m:mi></m:mtd></m:mtr><m:mtr><m:mtd><m:mi>y</m:mi></m:mtd></m:mtr></m:mtable></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>11</m:mn></m:mrow></m:msub><m:mi>x</m:mi><m:mo>+</m:mo><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>12</m:mn></m:mrow></m:msub><m:mi>y</m:mi><m:mo>+</m:mo><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>t</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>21</m:mn></m:mrow></m:msub><m:mi>x</m:mi><m:mo>+</m:mo><m:msub><m:mrow><m:mi>m</m:mi></m:mrow><m:mrow><m:mn>22</m:mn></m:mrow></m:msub><m:mi>y</m:mi><m:mo>+</m:mo><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>t</m:mi></m:mrow></m:msub></m:mtd></m:mtr></m:mtable></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mn>.</m:mn></m:mrow></m:mrow></m:mrow></m:mrow></m:math>
</div>
<p>The single matrix implements a linear transformation followed by a translation! This kind of transformation is called an <em>affine transformation</em>, and this way of implementing affine transformations by adding an extra dimension is called <em><a id="index_term528"/>homogeneous coordinates</em> (Roberts, 1965; Riesenfeld, 1981; Penna &amp; Patterson, 1986). Homogeneous coordinates not only clean up the code for transformations, <span aria-label="147" epub:type="pagebreak" id="pg_147" role="doc-pagebreak"/>but this scheme also makes it obvious how to compose two affine transformations: simply multiply the matrices.</p>
<p>A problem with this new formalism arises when we need to transform vectors that are not supposed to be positions—they represent directions or offsets between positions. Vectors that represent directions or offsets should not change when we translate an object. Fortunately, we can arrange for this by setting the third coordinate to zero:</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>t</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>t</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtable><m:mtr><m:mtd><m:mi>x</m:mi></m:mtd></m:mtr><m:mtr><m:mtd><m:mi>y</m:mi></m:mtd></m:mtr></m:mtable></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow></m:mrow><m:mo>=</m:mo><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtable><m:mtr><m:mtd><m:mi>x</m:mi></m:mtd></m:mtr><m:mtr><m:mtd><m:mi>y</m:mi></m:mtd></m:mtr></m:mtable></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mn>.</m:mn></m:mrow></m:math>
</div>
<p>If there is a scaling/rotation transformation in the upper-left 2 × 2 entries of the matrix, it will apply to the vector, but the translation still multiplies with the zero and is ignored. Furthermore, the zero is copied into the transformed vector, so direction vectors remain direction vectors after they are transformed.</p>
<aside class="boxed-text" epub:type="sidebar">
<p class="noindent">This gives an explanation for the name “homogeneous:” translation, rotation, and scaling of positions and directions all fit into a single system.</p>
</aside>
<p class="indent">This is exactly the behavior we want for vectors, so they fit smoothly into the system: the extra (third) coordinate will be either 1 or 0 depending on whether we are encoding a position or a direction. We actually do need to store the homoge-neous coordinate so we can distinguish between locations and other vectors. For example,</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mtable><m:mtr><m:mtd><m:mtable><m:mtr><m:mtd><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtable><m:mtr><m:mtd><m:mn>3</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>2</m:mn></m:mtd></m:mtr></m:mtable></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mtext>is a location</m:mtext></m:mtd><m:mtd><m:mtext>and</m:mtext></m:mtd></m:mtr></m:mtable></m:mtd><m:mtd><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtable><m:mtr><m:mtd><m:mn>3</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>2</m:mn></m:mtd></m:mtr></m:mtable></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mtext>is a displacement or direction.</m:mtext></m:mrow></m:mtd></m:mtr></m:mtable></m:mrow></m:math>
</div>
<p>Later, when we do perspective viewing, we will see that it is useful to allow the homogeneous coordinate to take on values other than one or zero.</p>
<p>Homogeneous coordinates are used nearly universally to represent transformations in graphics systems. In particular, homogeneous coordinates underlie the design and operation of renderers implemented in graphics hardware. We will see in <a href="C13_chapter8.xhtml#c8">Chapter 8</a> that homogeneous coordinates also make it easy to draw scenes in perspective, another reason for their popularity.</p>
<aside class="boxed-text" epub:type="sidebar">
<p class="noindent">Homogeneous coordinates are also ubiquitous in computer vision.</p>
</aside>
<p class="indent">Homogeneous coordinates can be considered just a clever way to handle the bookkeeping for translation, but there is also a different, geometric interpretation. The key observation is that when we do a 3D shear based on the <em>z</em>-coordinate, we get this transform:</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>t</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>t</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtable><m:mtr><m:mtd><m:mi>x</m:mi></m:mtd></m:mtr><m:mtr><m:mtd><m:mi>y</m:mi></m:mtd></m:mtr></m:mtable></m:mtd></m:mtr><m:mtr><m:mtd><m:mi>z</m:mi></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtable><m:mtr><m:mtd><m:mi>x</m:mi><m:mo>+</m:mo><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>t</m:mi></m:mrow></m:msub><m:mi>z</m:mi></m:mtd></m:mtr><m:mtr><m:mtd><m:mi>y</m:mi><m:mo>+</m:mo><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>t</m:mi></m:mrow></m:msub><m:mi>z</m:mi></m:mtd></m:mtr></m:mtable></m:mtd></m:mtr><m:mtr><m:mtd><m:mi>z</m:mi></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mn>.</m:mn></m:mrow></m:mrow></m:mrow></m:mrow></m:math>
</div>
<p>Note that this almost has the form we want in <em>x</em> and <em>y</em> for a 2D translation, but has a <em>z</em> hanging around that doesn’t have a meaning in 2D. Now comes the key <a id="term-961"/><span aria-label="148" epub:type="pagebreak" id="pg_148" role="doc-pagebreak"/>decision: we will add a coordinate z = 1 to all 2D locations. This gives us</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>t</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>t</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtable><m:mtr><m:mtd><m:mi>x</m:mi></m:mtd></m:mtr><m:mtr><m:mtd><m:mi>y</m:mi></m:mtd></m:mtr></m:mtable></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtable><m:mtr><m:mtd><m:mi>x</m:mi><m:mo>+</m:mo><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>t</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:mi>y</m:mi><m:mo>+</m:mo><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>t</m:mi></m:mrow></m:msub></m:mtd></m:mtr></m:mtable></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mn>.</m:mn></m:mrow></m:mrow></m:mrow></m:mrow></m:math>
</div>
<p>By associating a (<em>z</em> = 1)-coordinate with all 2D points, we now can encode translations into matrix form. For example, to first translate in 2D by (<em>x<sub>t</sub> ,y<sub>t</sub></em>) and then rotate by angle ϕ we would use the matrix</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mtext>M</m:mtext><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtext>cos</m:mtext><m:mi>ϕ</m:mi></m:mtd><m:mtd><m:mo>−</m:mo><m:mtext>sin</m:mtext><m:mi>ϕ</m:mi></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mtext>sin</m:mtext><m:mi>ϕ</m:mi></m:mtd><m:mtd><m:mtext>cos</m:mtext><m:mi>ϕ</m:mi></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>t</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>t</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mn>.</m:mn></m:mrow></m:mrow></m:mrow></m:math>
</div>
<p>Note that the 2D rotation matrix is now 3 × 3 with zeros in the “translation slots.” With this type of formalism, which uses shears along <em>z</em> = 1 to encode translations, we can represent any number of 2D shears, 2D rotations, and 2D translations as one composite 3D matrix. The bottom row of that matrix will always be (0, 0, 1) , so we don’t really have to store it. We just need to remember it is there when we multiply two matrices together.</p>
<p>In 3D, the same technique works: we can add a fourth coordinate, a homogeneous coordinate, and then, we have translations:</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>t</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>t</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>t</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtable><m:mtr><m:mtd><m:mi>x</m:mi></m:mtd></m:mtr><m:mtr><m:mtd><m:mi>y</m:mi></m:mtd></m:mtr></m:mtable></m:mtd></m:mtr><m:mtr><m:mtd><m:mi>z</m:mi></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtable><m:mtr><m:mtd><m:mtable><m:mtr><m:mtd><m:mi>x</m:mi><m:mo>+</m:mo><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>t</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:mi>y</m:mi><m:mo>+</m:mo><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>t</m:mi></m:mrow></m:msub></m:mtd></m:mtr></m:mtable></m:mtd></m:mtr><m:mtr><m:mtd><m:mi>z</m:mi><m:mo>+</m:mo><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>t</m:mi></m:mrow></m:msub></m:mtd></m:mtr></m:mtable></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mn>.</m:mn></m:mrow></m:mrow></m:mrow></m:math>
</div>
<p>Again, for a direction vector, the fourth coordinate is zero and the vector is thus unaffected by translations.</p>
<aside class="boxed-text-e" epub:type="sidebar">
<p class="noindent1"><span class="blue">Example 16 (<a id="index_term1267"/>Windowing transformations)</span> Often in graphics, we need to create a transform matrix that takes points in the rectangle <span class="inline-formula"><m:math alttext=""><m:mrow><m:mrow><m:mo>[</m:mo><m:msubsup><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mn>1</m:mn></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup><m:mo>,</m:mo><m:msubsup><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup><m:mo>]</m:mo><m:mo>×</m:mo></m:mrow><m:mo>[</m:mo><m:msubsup><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mn>1</m:mn></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup><m:mo>,</m:mo><m:msubsup><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup><m:mo>]</m:mo><m:mn>.</m:mn></m:mrow></m:math></span>. This can be accomplished with a single scale and translate in sequence. However, it is more intuitive to create the transform from a sequence of three operations (<a href="C12_chapter7.xhtml#f7_18">Figure 7.18</a>):</p>
<ol class="list-order">
<li>
<p class="list">Move the point (<em>x<sub>l</sub> ,y<sub>l</sub></em>) to the origin.</p>
</li>
<li>
<p class="list">Scale the rectangle to be the same size as the target rectangle.</p>
</li>
<li>
<p class="list">Move the origin to point (<em>x<sup/><sub>l</sub> ,y<sup/><sub>l</sub></em>) .</p>
</li>
</ol>
</aside>
<figure id="f7_18" tabindex="0">
<img alt="" src="../images/fig7_18.jpg"/>
<figcaption><p><span class="blue">Figure 7.18.</span> <a id="term-948"/><a id="term-962"/><span aria-label="149" epub:type="pagebreak" id="pg_149" role="doc-pagebreak"/>To take one rectangle (window) to the other, we first shift the lower-left corner to the origin, then scale it to the new size, and then move the origin to the lower-left corner of the target rectangle.</p></figcaption>
</figure>
<p>Remembering that the right-hand matrix is applied first, we can write</p>
<div class="disp-formula" id="equ7_6">
<m:math alttext=""><m:mrow><m:mtable><m:mtr><m:mtd><m:mtext>window</m:mtext></m:mtd><m:mtd><m:mo>=</m:mo></m:mtd><m:mtd><m:mtext>translate</m:mtext><m:mrow><m:mo>(</m:mo><m:msubsup><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>l</m:mi></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup><m:mo>,</m:mo><m:msubsup><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mn>1</m:mn></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup><m:mo>)</m:mo><m:mtext>scale</m:mtext><m:mrow><m:mo>(</m:mo><m:mfrac><m:mrow><m:msubsup><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup><m:mo>−</m:mo><m:msubsup><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mn>1</m:mn></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup></m:mrow><m:mrow><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow></m:msub><m:mo>−</m:mo><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mn>1</m:mn></m:mrow></m:msub></m:mrow></m:mfrac><m:mo>,</m:mo><m:mfrac><m:mrow><m:msubsup><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup><m:mo>−</m:mo><m:msubsup><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mn>1</m:mn></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup></m:mrow><m:mrow><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow></m:msub><m:mo>−</m:mo><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mn>1</m:mn></m:mrow></m:msub></m:mrow></m:mfrac><m:mo>)</m:mo><m:mtext>translate</m:mtext><m:mrow><m:mo>(</m:mo><m:mo>−</m:mo><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mn>1</m:mn></m:mrow></m:msub><m:mo>,</m:mo><m:mo>−</m:mo><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mn>1</m:mn></m:mrow></m:msub><m:mo>)</m:mo></m:mrow></m:mrow></m:mrow></m:mtd></m:mtr><m:mtr><m:mtd/><m:mtd><m:mo>=</m:mo></m:mtd><m:mtd><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:msubsup><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mn>1</m:mn></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:msubsup><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mn>1</m:mn></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mfrac><m:mrow><m:msubsup><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup><m:mo>−</m:mo><m:msubsup><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>l</m:mi></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup></m:mrow><m:mrow><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow></m:msub><m:mo>−</m:mo><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mn>1</m:mn></m:mrow></m:msub></m:mrow></m:mfrac></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mfrac><m:mrow><m:msubsup><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow><m:mrow><m:mi>l</m:mi></m:mrow></m:msubsup><m:mo>−</m:mo><m:msubsup><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>l</m:mi></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup></m:mrow><m:mrow><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow></m:msub><m:mo>−</m:mo><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>l</m:mi></m:mrow></m:msub></m:mrow></m:mfrac></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow></m:mrow><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mo>−</m:mo><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mn>1</m:mn></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mo>−</m:mo><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mn>1</m:mn></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow></m:mtd></m:mtr><m:mtr><m:mtd/><m:mtd><m:mo>=</m:mo></m:mtd><m:mtd><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mfrac><m:mrow><m:msubsup><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup><m:mo>−</m:mo><m:msubsup><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>l</m:mi></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup></m:mrow><m:mrow><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow></m:msub><m:mo>−</m:mo><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mn>1</m:mn></m:mrow></m:msub></m:mrow></m:mfrac></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mfrac><m:mrow><m:msubsup><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>l</m:mi></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow></m:msub><m:mo>−</m:mo><m:msubsup><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow></m:msub></m:mrow><m:mrow><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow></m:msub><m:mo>−</m:mo><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mn>1</m:mn></m:mrow></m:msub></m:mrow></m:mfrac></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mfrac><m:mrow><m:msubsup><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup><m:mo>−</m:mo><m:msubsup><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>l</m:mi></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup></m:mrow><m:mrow><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow></m:msub><m:mo>−</m:mo><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mn>1</m:mn></m:mrow></m:msub></m:mrow></m:mfrac></m:mtd><m:mtd><m:mfrac><m:mrow><m:msubsup><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>l</m:mi></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow></m:msub><m:mo>−</m:mo><m:msubsup><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow></m:msub></m:mrow><m:mrow><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow></m:msub><m:mo>−</m:mo><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mn>1</m:mn></m:mrow></m:msub></m:mrow></m:mfrac></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mn>.</m:mn></m:mrow></m:mtd></m:mtr></m:mtable></m:mrow><m:mspace width="3em"/><m:mo>(7.6)</m:mo></m:math>
</div>
<p>It is perhaps not surprising to some readers that the resulting matrix has the form it does, but the constructive process with the three matrices leaves no doubt as to the correctness of the result.</p>
<p>An exactly analogous construction can be used to define a 3D windowing transformation, which maps the box [<em>x<sub>l</sub> ,x<sub>h</sub></em>] × [<em>y<sub>l</sub> ,y<sub>h</sub></em>] × [<em>z<sub>l</sub> ,z<sub>h</sub></em>] to the box</p>
<p>
<span aria-label="150" epub:type="pagebreak" id="pg_150" role="doc-pagebreak"/>
</p>
<div class="disp-formula" id="equ7_7">
<m:math alttext=""><m:mrow><m:mtable><m:mtr><m:mtd><m:mrow><m:mo>[</m:mo><m:msubsup><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>l</m:mi></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup><m:mo>,</m:mo><m:msubsup><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup><m:mo>]</m:mo><m:mo>×</m:mo><m:mo>[</m:mo><m:msubsup><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>l</m:mi></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup><m:mo>,</m:mo><m:msubsup><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup><m:mo>]</m:mo></m:mrow><m:mo>×</m:mo><m:mo>[</m:mo><m:msubsup><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>l</m:mi></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup><m:mo>,</m:mo><m:msubsup><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup><m:mo>]</m:mo><m:mo>:</m:mo></m:mtd></m:mtr><m:mtr><m:mtd><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mfrac><m:mrow><m:msubsup><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup><m:mo>−</m:mo><m:msubsup><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup></m:mrow><m:mrow><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow></m:msub><m:mo>−</m:mo><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mn>1</m:mn></m:mrow></m:msub></m:mrow></m:mfrac></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mfrac><m:mrow><m:msubsup><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>l</m:mi></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow></m:msub><m:mo>−</m:mo><m:msubsup><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>l</m:mi></m:mrow></m:msub></m:mrow><m:mrow><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow></m:msub><m:mo>−</m:mo><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>l</m:mi></m:mrow></m:msub></m:mrow></m:mfrac></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mfrac><m:mrow><m:msubsup><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup><m:mo>−</m:mo><m:msubsup><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup></m:mrow><m:mrow><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow></m:msub><m:mo>−</m:mo><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mn>1</m:mn></m:mrow></m:msub></m:mrow></m:mfrac></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mfrac><m:mrow><m:msubsup><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>l</m:mi></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow></m:msub><m:mo>−</m:mo><m:msubsup><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>l</m:mi></m:mrow></m:msub></m:mrow><m:mrow><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow></m:msub><m:mo>−</m:mo><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>l</m:mi></m:mrow></m:msub></m:mrow></m:mfrac></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mfrac><m:mrow><m:msubsup><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup><m:mo>−</m:mo><m:msubsup><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup></m:mrow><m:mrow><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow></m:msub><m:mo>−</m:mo><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mn>1</m:mn></m:mrow></m:msub></m:mrow></m:mfrac></m:mtd><m:mtd><m:mfrac><m:mrow><m:msubsup><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>l</m:mi></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow></m:msub><m:mo>−</m:mo><m:msubsup><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow><m:mrow><m:mo>′</m:mo></m:mrow></m:msubsup><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>l</m:mi></m:mrow></m:msub></m:mrow><m:mrow><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>h</m:mi></m:mrow></m:msub><m:mo>−</m:mo><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>l</m:mi></m:mrow></m:msub></m:mrow></m:mfrac></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mn>.</m:mn></m:mrow></m:mtd></m:mtr></m:mtable></m:mrow><m:mspace width="3em"/><m:mo>(7.7)</m:mo></m:math>
</div>
<p>It is interesting to note that if we multiply an arbitrary matrix composed of scales, shears, and rotations with a simple translation (translation comes second), we get</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>t</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>t</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>t</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>a</m:mi></m:mrow><m:mrow><m:mn>11</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>a</m:mi></m:mrow><m:mrow><m:mn>12</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>a</m:mi></m:mrow><m:mrow><m:mn>13</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>a</m:mi></m:mrow><m:mrow><m:mn>21</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>a</m:mi></m:mrow><m:mrow><m:mn>22</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>a</m:mi></m:mrow><m:mrow><m:mn>23</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>a</m:mi></m:mrow><m:mrow><m:mn>31</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>a</m:mi></m:mrow><m:mrow><m:mn>32</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>a</m:mi></m:mrow><m:mrow><m:mn>33</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>a</m:mi></m:mrow><m:mrow><m:mn>11</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>a</m:mi></m:mrow><m:mrow><m:mn>12</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>a</m:mi></m:mrow><m:mrow><m:mn>13</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>t</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>a</m:mi></m:mrow><m:mrow><m:mn>21</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>a</m:mi></m:mrow><m:mrow><m:mn>22</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>a</m:mi></m:mrow><m:mrow><m:mn>23</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>t</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>a</m:mi></m:mrow><m:mrow><m:mn>31</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>a</m:mi></m:mrow><m:mrow><m:mn>32</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>a</m:mi></m:mrow><m:mrow><m:mn>33</m:mn></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>t</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mn>.</m:mn></m:mrow></m:mrow></m:mrow></m:mrow></m:math>
</div>
<p>Thus, we can look at any matrix and think of it as a scaling/rotation part and a translation part because the components are nicely separated from each other.</p>
<p>An important class of transforms are <em>rigid-body</em> transforms. These are composed only of translations and rotations, so they have no stretching or shrinking of the objects. Such transforms will have a pure rotation for the <em>a<sub>ij</sub></em> above.</p>
</section>
<section>
<h2 id="sec7_4"><a id="index_term1243"/><a epub:type="backlink" href="C02a_toc.xhtml#rsec7_4" role="doc-backlink"><span class="green">7.4 Inverses of Transformation Matrices</span></a></h2>
<p>While we can always invert a matrix algebraically, we can use geometry if we know what the transform does. For example, the inverse of scale(<em>s<sub>x</sub></em>, <em>s<sub>y</sub></em>, <em>s<sub>z</sub></em>) is scale(1/<em>s<sub>x</sub></em>, 1/<em>s<sub>y</sub></em>, 1/<em>s<sub>z</sub></em>) . The inverse of a rotation is the same rotation with the opposite sign on the angle. The inverse of a translation is a translation in the opposite direction. If we have a series of matrices <strong>M</strong> = <strong>M</strong><sub>1</sub><strong>M</strong><sub>2</sub>... <strong>M</strong><em><sub>n</sub></em>, then <span class="inline-formula"><m:math alttext=""><m:mrow><m:msup><m:mrow><m:mtext>M</m:mtext></m:mrow><m:mrow><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:msup><m:mo>=</m:mo><m:msubsup><m:mrow><m:mtext>M</m:mtext></m:mrow><m:mrow><m:mi>n</m:mi></m:mrow><m:mrow><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:msubsup><m:mn>...</m:mn><m:msubsup><m:mrow><m:mtext>M</m:mtext></m:mrow><m:mrow><m:mn>2</m:mn></m:mrow><m:mrow><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:msubsup><m:msubsup><m:mrow><m:mtext>M</m:mtext></m:mrow><m:mrow><m:mn>1</m:mn></m:mrow><m:mrow><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:msubsup></m:mrow></m:math></span>.</p>
<p>Also, certain types of transformation matrices are easy to invert. We’ve already mentioned scales, which are diagonal matrices; the second important example is rotations, which are orthogonal matrices. Recall (<a href="C11_chapter6.xhtml#sec6_2_4">Section 6.2.4</a>) that the inverse of an orthogonal matrix is its transpose. This makes it easy to invert rotations and rigid body transformations (see Exercise 6). Also, it’s useful to know that a matrix with [0 0 0 1] in the bottom row has an inverse that also has [0 0 0 1] in the bottom row (see Exercise 7).</p>
<p>Interestingly, we can use SVD to invert a matrix as well. Since we know that any matrix can be decomposed into a rotation times a scale times a rotation, <a id="term-219"/><a id="term-926"/><a id="term-951"/><a id="term-952"/><span aria-label="151" epub:type="pagebreak" id="pg_151" role="doc-pagebreak"/>inversion is straightforward. For example, in 3D we have</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mtext>M</m:mtext><m:mo>=</m:mo><m:msub><m:mrow><m:mtext>R</m:mtext></m:mrow><m:mrow><m:mn>1</m:mn></m:mrow></m:msub><m:mtext>scale</m:mtext><m:mrow><m:mo>(</m:mo><m:msub><m:mrow><m:mi>σ</m:mi></m:mrow><m:mrow><m:mn>1</m:mn></m:mrow></m:msub><m:mo>,</m:mo><m:msub><m:mrow><m:mi>σ</m:mi></m:mrow><m:mrow><m:mn>2</m:mn></m:mrow></m:msub><m:mo>,</m:mo><m:msub><m:mrow><m:mi>σ</m:mi></m:mrow><m:mrow><m:mn>3</m:mn></m:mrow></m:msub><m:mo>)</m:mo><m:msub><m:mrow><m:mtext>R</m:mtext></m:mrow><m:mrow><m:mn>2</m:mn></m:mrow></m:msub><m:mo>,</m:mo></m:mrow></m:mrow></m:math>
</div>
<p>and from the rules above, it follows easily that</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:msup><m:mrow><m:mtext>M</m:mtext></m:mrow><m:mrow><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:msup><m:mo>=</m:mo><m:msubsup><m:mrow><m:mtext>R</m:mtext></m:mrow><m:mrow><m:mn>2</m:mn></m:mrow><m:mrow><m:mtext>T</m:mtext></m:mrow></m:msubsup><m:mtext>scale</m:mtext><m:mrow><m:mo>(</m:mo><m:mn>1</m:mn><m:mo>/</m:mo><m:msub><m:mrow><m:mi>σ</m:mi></m:mrow><m:mrow><m:mn>1</m:mn></m:mrow></m:msub><m:mo>,</m:mo><m:mn>1</m:mn><m:mo>/</m:mo><m:msub><m:mrow><m:mi>σ</m:mi></m:mrow><m:mrow><m:mn>2</m:mn></m:mrow></m:msub><m:mo>,</m:mo><m:mn>1</m:mn><m:mo>/</m:mo><m:msub><m:mrow><m:mi>σ</m:mi></m:mrow><m:mrow><m:mn>3</m:mn></m:mrow></m:msub><m:mo>)</m:mo><m:msubsup><m:mrow><m:mtext>R</m:mtext></m:mrow><m:mrow><m:mn>1</m:mn></m:mrow><m:mrow><m:mtext>T</m:mtext></m:mrow></m:msubsup><m:mn>.</m:mn></m:mrow></m:mrow></m:math>
</div>
</section>
<section>
<h2 id="sec7_5"><a id="index_term265"/><a id="index_term1258"/><a epub:type="backlink" href="C02a_toc.xhtml#rsec7_5" role="doc-backlink"><span class="green">7.5 Coordinate Transformations</span></a></h2>
<p>All of the previous discussion has been in terms of using transformation matrices to move points around. We can also think of them as simply changing the coordinate system in which the point is represented. For example, in <a href="C12_chapter7.xhtml#f7_19">Figure 7.19</a>, we see two ways to visualize a movement. In different contexts, either interpretation may be more suitable.</p>
<figure id="f7_19" tabindex="0">
<img alt="" src="../images/fig7_19.jpg"/>
<figcaption><p><span class="blue">Figure 7.19.</span> The point (2,1) has a transform “translate by (<em>–</em>1,0)” applied to it. On the top right is our mental image if we view this transformation as a physical movement, and on the bottom right is our mental image if we view it as a change of coordinates (a movement of the origin in this case). The artificial boundary is just an artifice, and the relative position of the axes and the point are the same in either case.</p></figcaption>
</figure>
<p>For example, a driving game may have a model of a city and a model of a car. If the player is presented with a view out the windshield, objects inside the car are always drawn in the same place on the screen, while the streets and buildings appear to move backward as the player drives. On each frame, we apply a transformation to these objects that moves them farther back than on the previous frame. One way to think of this operation is simply that it moves the buildings backward; another way to think of it is that the buildings are staying put but the coordinate system in which we want to draw them—which is attached to the car—is moving. In the second interpretation, the transformation is changing <a id="term-216"/><a id="term-297"/><a id="term-343"/><span aria-label="152" epub:type="pagebreak" id="pg_152" role="doc-pagebreak"/>the coordinates of the city geometry, expressing them as coordinates in the car’s <a id="index_term264"/>coordinate system. Both ways will lead to exactly the same matrix that is applied to the geometry outside the car.</p>
<p>If the game also supports an overhead view to show where the car is in the city, the buildings and streets need to be drawn in fixed positions while the car needs to move from frame to frame. The same two interpretations apply: we can think of the changing transformation as moving the car from its canonical position to its current location in the world; or we can think of the transformation as simply changing the coordinates of the car’s geometry, which is originally expressed in terms of a coordinate system attached to the car, to express them instead in a coordinate system fixed relative to the city. The change-of-coordinates interpretation makes it clear that the matrices used in these two modes (city-to-car coordinate change vs. car-to-city coordinate change) are inverses of one another.</p>
<p>The idea of changing coordinate systems is much like the idea of type conversions in programming. Before we can add a floating-point number to an integer, we need to convert the integer to floating point or the floating-point number to an integer, depending on our needs, so that the types match. And before we can draw the city and the car together, we need to convert the city to car coordinates or the car to city coordinates, depending on our needs, so that the coordinates match.</p>
<p>When managing multiple coordinate systems, it’s easy to get confused and wind up with objects in the wrong coordinates, causing them to show up in unexpected places. But with systematic thinking about transformations between coordinate systems, you can reliably get the transformations right.</p>
<p>Geometrically, a coordinate system, or coordinate <em>frame</em>, consists of an origin and a basis—a set of three vectors. Orthonormal bases are so convenient that we’ll normally assume frames are orthonormal unless otherwise specified. In a frame with origin <strong>p</strong> and basis <em>{</em><strong>u</strong>, <strong>v</strong>, <strong>w</strong><em>}</em>, the coordinates (<em>u, v, w</em>) describe the point</p>
<aside class="boxed-text" epub:type="sidebar">
<p class="noindent">In 2D, of course, there are two basis vectors.</p>
</aside>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mtext>p</m:mtext><m:mo>+</m:mo><m:mi>u</m:mi><m:mtext>u</m:mtext><m:mo>+</m:mo><m:mi>v</m:mi><m:mtext>v</m:mtext><m:mo>+</m:mo><m:mi>w</m:mi><m:mtext>w.</m:mtext></m:mrow></m:math>
</div>
<p>When we store these vectors in the computer, they need to be represented in terms of some coordinate system. To get things started, we have to designate some canonical coordinate system, often called “global” or “world” coordinates, which is used to describe all other systems. In the city example, we might adopt the street grid and use the convention that the <em>x</em>-axis points along Main Street, the <em>y</em>-axis points up, and the <em>z</em>-axis points along Central Avenue. Then, when we write the origin and basis of the car frame in terms of these coordinates, it is clear what we mean.</p>
<aside class="boxed-text" epub:type="sidebar">
<p class="noindent">In 2D our convention, it is to use the point <strong>o</strong> for the origin, and <strong>x</strong> and <strong>y</strong> for</p>
</aside>
<p class="indent">In 2D, right-handed means <strong>y</strong> is counterclockwise from <strong>x</strong>. the right-handed orthonormal basis vectors <strong>x</strong> and <strong>y</strong> (<a href="C12_chapter7.xhtml#f7_20">Figure 7.20</a>).</p>
<figure id="f7_20" tabindex="0">
<img alt="" src="../images/fig7_20.jpg"/>
<figcaption><p><span class="blue">Figure 7.20.</span> <a id="term-218"/><a id="term-220"/><a id="term-927"/><a id="term-933"/><a id="term-953"/><span aria-label="153" epub:type="pagebreak" id="pg_153" role="doc-pagebreak"/>The point <strong>p</strong> can be represented in terms of either coordinate system.</p></figcaption>
</figure>
<p>Another coordinate system might have an origin <strong>e</strong> and right-handed orthonormal basis vectors <strong>u</strong> and <strong>v</strong>. Note that typically the canonical data <strong>o</strong>, <strong>x</strong>, and <strong>y</strong> are never stored explicitly. They are the frame-of-reference for all other coordinate systems. In that coordinate system, we often write down the location of <strong>p</strong> as an ordered pair, which is shorthand for a full vector expression:</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mtext>p</m:mtext><m:mo>=</m:mo><m:mrow><m:mo>(</m:mo><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>p</m:mi></m:mrow></m:msub><m:mo>,</m:mo><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>p</m:mi></m:mrow></m:msub><m:mo>)</m:mo><m:mo>≡</m:mo><m:mtext>o</m:mtext><m:mo>+</m:mo><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>p</m:mi></m:mrow></m:msub><m:mtext>x</m:mtext><m:mo>+</m:mo><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>p</m:mi></m:mrow></m:msub><m:mtext>y.</m:mtext></m:mrow></m:mrow></m:math>
</div>
<p>For example, in <a href="C12_chapter7.xhtml#f7_20">Figure 7.20</a>, (<em>x<sub>p</sub>, y<sub>p</sub></em>) = (2.5, 0.9) . Note that the pair (<em>x<sub>p</sub>, y<sub>p</sub></em>) implicitly assumes the origin <strong>o</strong>. Similarly, we can express <strong>p</strong> in terms of another equation:</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mtext>p</m:mtext><m:mo>=</m:mo><m:mrow><m:mo>(</m:mo><m:msub><m:mrow><m:mi>u</m:mi></m:mrow><m:mrow><m:mi>p</m:mi></m:mrow></m:msub><m:mo>,</m:mo><m:msub><m:mrow><m:mi>v</m:mi></m:mrow><m:mrow><m:mi>p</m:mi></m:mrow></m:msub><m:mo>)</m:mo><m:mo>≡</m:mo><m:mtext>e</m:mtext><m:mo>+</m:mo><m:msub><m:mrow><m:mi>u</m:mi></m:mrow><m:mrow><m:mi>p</m:mi></m:mrow></m:msub><m:mtext>x</m:mtext><m:mo>+</m:mo><m:msub><m:mrow><m:mi>v</m:mi></m:mrow><m:mrow><m:mi>p</m:mi></m:mrow></m:msub><m:mtext>v</m:mtext><m:mtext>.</m:mtext></m:mrow></m:mrow></m:math>
</div>
<p>In <a href="C12_chapter7.xhtml#f7_20">Figure 7.20</a>, this has (<em>u<sub>p</sub>, v<sub>p</sub></em>) = (0.5, <em>–</em>0.7). Again, the origin <strong>e</strong> is left as an implicit part of the coordinate system associated with <strong>u</strong> and <strong>v</strong>.</p>
<p>We can express this same relationship using matrix machinery, like this:</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>p</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>p</m:mi></m:mrow></m:msub></m:mtd></m:mtr></m:mtable></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>e</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>e</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow></m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>v</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>v</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>u</m:mi></m:mrow><m:mrow><m:mi>p</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>v</m:mi></m:mrow><m:mrow><m:mi>p</m:mi></m:mrow></m:msub></m:mtd></m:mtr></m:mtable></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mo>=</m:mo><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>v</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>e</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>v</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>e</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>u</m:mi></m:mrow><m:mrow><m:mi>p</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>v</m:mi></m:mrow><m:mrow><m:mi>p</m:mi></m:mrow></m:msub></m:mtd></m:mtr></m:mtable></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mn>.</m:mn></m:mrow></m:math>
</div>
<p>Note that this assumes we have the point <strong>e</strong> and vectors <strong>u</strong> and <strong>v</strong> stored in canonical coordinates; the (<em>x, y</em>)-coordinate system is the first among equals. In terms of the basic types of transformations we’ve discussed in this chapter, this is a rotation (involving <strong>u</strong> and <strong>v</strong>) followed by a translation (involving <strong>e</strong>). Looking at the matrix for the rotation and translation together, you can see it’s very easy to write down: we just put <strong>u</strong>, <strong>v</strong>, and <strong>e</strong> into the columns of a matrix, with the usual [0 0 1] in the third row. To make this even clearer, we can write the matrix like this:</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:msub><m:mrow><m:mtext>p</m:mtext></m:mrow><m:mrow><m:mi>x</m:mi><m:mi>y</m:mi></m:mrow></m:msub><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtext>u</m:mtext></m:mtd><m:mtd><m:mtext>v</m:mtext></m:mtd><m:mtd><m:mtext>e</m:mtext></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:msub><m:mrow><m:mtext>p</m:mtext></m:mrow><m:mrow><m:mi>u</m:mi><m:mi>v</m:mi></m:mrow></m:msub><m:mn>.</m:mn></m:mrow></m:mrow></m:math>
</div>
<aside class="boxed-text" epub:type="sidebar">
<p class="noindent">The name “frame-to-canonical” is based on thinking about changing the coordinates of a vector from one system to another. Thinking in terms of moving vectors around, the <a id="index_term1240"/>frame-to-canonical matrix maps the canonical frame to the (<em>u</em>,<em>v</em>) frame.</p>
</aside>
<p class="noindent">We call this matrix the <em>frame-to-canonical</em> matrix for the (<em>u</em>, <em>v</em>) frame. It takes points expressed in the (<em>u, v</em>) frame and converts them to the same points expressed in the canonical frame.</p>
<p class="indent"><span aria-label="154" epub:type="pagebreak" id="pg_154" role="doc-pagebreak"/>To go in the other direction, we have</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>u</m:mi></m:mrow><m:mrow><m:mi>p</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>v</m:mi></m:mrow><m:mrow><m:mi>p</m:mi></m:mrow></m:msub></m:mtd></m:mtr></m:mtable></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mo>=</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>v</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>v</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mo>−</m:mo><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>e</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:msub><m:mrow><m:mtable><m:mtr><m:mtd><m:mo>−</m:mo><m:mi>y</m:mi></m:mtd></m:mtr></m:mtable></m:mrow><m:mrow><m:mi>e</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>p</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>p</m:mi></m:mrow></m:msub></m:mtd></m:mtr></m:mtable></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mn>.</m:mn></m:mrow></m:mrow></m:mrow></m:mrow></m:mrow></m:math>
</div>
<p>This is a translation followed by a rotation; they are the inverses of the rotation and translation we used to build the frame-to-canonical matrix, and when multiplied together, they produce the inverse of the frame-to-canonical matrix, which is (not surprisingly) called the canonical-to-frame matrix:</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:msub><m:mrow><m:mtext>p</m:mtext></m:mrow><m:mrow><m:mi>u</m:mi><m:mi>v</m:mi></m:mrow></m:msub><m:mo>=</m:mo><m:msup><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtext>u</m:mtext></m:mtd><m:mtd><m:mtext>v</m:mtext></m:mtd><m:mtd><m:mtext>e</m:mtext></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow><m:mrow><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:msup><m:msub><m:mrow><m:mtext>p</m:mtext></m:mrow><m:mrow><m:mi>x</m:mi><m:mi>y</m:mi><m:mn>.</m:mn></m:mrow></m:msub></m:mrow></m:math>
</div>
<p>The canonical-to-frame matrix takes points expressed in the canonical frame and converts them to the same points expressed in the (<em>u</em>,<em>v</em>) frame. We have written this matrix as the inverse of the frame-to-canonical matrix because it can’t immediately be written down using the canonical coordinates of <strong>e</strong>, <strong>u</strong>, and <strong>v</strong>. But remember that all coordinate systems are equivalent; it’s only our convention of storing vectors in terms of <em>x</em>- and <em>y</em>-coordinates that creates this seeming asymmetry. The <a id="index_term1235"/><a id="index_term122"/>canonical-to-frame matrix <em>can</em> be expressed simply in terms of the (<em>u</em>, <em>v</em>) coordinates of <strong>o</strong>, <strong>x</strong>,and <strong>y</strong>:</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:msub><m:mrow><m:mtext>p</m:mtext></m:mrow><m:mrow><m:mi>u</m:mi><m:mi>v</m:mi></m:mrow></m:msub><m:mo>=</m:mo><m:msup><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mtext>x</m:mtext></m:mrow><m:mrow><m:mi>u</m:mi><m:mi>v</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mtext>y</m:mtext></m:mrow><m:mrow><m:mi>u</m:mi><m:mi>v</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mtext>o</m:mtext></m:mrow><m:mrow><m:mi>u</m:mi><m:mi>v</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow><m:mrow/></m:msup><m:msub><m:mrow><m:mtext>p</m:mtext></m:mrow><m:mrow><m:mi>x</m:mi><m:mi>y</m:mi><m:mn>.</m:mn></m:mrow></m:msub></m:mrow></m:math>
</div>
<p>All these ideas work strictly analogously in 3D, where we have</p>
<div class="disp-formula" id="equ7_8">
<m:math alttext=""><m:mrow><m:mtable><m:mtr><m:mtd><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtable><m:mtr><m:mtd><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>p</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>p</m:mi></m:mrow></m:msub></m:mtd></m:mtr></m:mtable></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>p</m:mi></m:mrow></m:msub></m:mtd></m:mtr></m:mtable></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow></m:mtd><m:mtd><m:mo>=</m:mo></m:mtd><m:mtd><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>e</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>e</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>e</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>v</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>w</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>v</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>w</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>v</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>w</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtable><m:mtr><m:mtd><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>u</m:mi></m:mrow><m:mrow><m:mi>p</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>v</m:mi></m:mrow><m:mrow><m:mi>p</m:mi></m:mrow></m:msub></m:mtd></m:mtr></m:mtable></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>w</m:mi></m:mrow><m:mrow><m:mi>p</m:mi></m:mrow></m:msub></m:mtd></m:mtr></m:mtable></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow></m:mrow></m:mrow></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mtext>p</m:mtext></m:mrow><m:mrow><m:mi>x</m:mi><m:mi>y</m:mi><m:mi>z</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:mo>=</m:mo></m:mtd><m:mtd><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtext>u</m:mtext></m:mtd><m:mtd><m:mtext>v</m:mtext></m:mtd><m:mtd><m:mtext>w</m:mtext></m:mtd><m:mtd><m:mtext>e</m:mtext></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:msub><m:mrow><m:mtext>p</m:mtext></m:mrow><m:mrow><m:mi>u</m:mi><m:mi>v</m:mi><m:mi>w</m:mi><m:mo>,</m:mo></m:mrow></m:msub></m:mrow></m:mtd></m:mtr></m:mtable></m:mrow><m:mspace width="3em"/><m:mo>(7.8)</m:mo></m:math>
</div>
<p>and</p>
<div class="disp-formula" id="equ7_9">
<m:math alttext=""><m:mrow><m:mtable><m:mtr><m:mtd><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>u</m:mi></m:mrow><m:mrow><m:mi>p</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>v</m:mi></m:mrow><m:mrow><m:mi>p</m:mi></m:mrow></m:msub></m:mtd></m:mtr></m:mtable></m:mtd></m:mtr><m:mtr><m:mtd><m:mtable><m:mtr><m:mtd><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>w</m:mi></m:mrow><m:mrow><m:mi>p</m:mi></m:mrow></m:msub></m:mtd></m:mtr></m:mtable></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow></m:mtd><m:mtd><m:mo>=</m:mo></m:mtd><m:mtd><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>u</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>v</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>v</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>v</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>w</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>w</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>w</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:msub><m:mrow><m:mtable><m:mtr><m:mtd><m:mo>−</m:mo><m:mi>x</m:mi></m:mtd></m:mtr></m:mtable></m:mrow><m:mrow><m:mi>e</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:msub><m:mrow><m:mtable><m:mtr><m:mtd><m:mo>−</m:mo><m:mi>y</m:mi></m:mtd></m:mtr></m:mtable></m:mrow><m:mrow><m:mi>e</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:msub><m:mrow><m:mtable><m:mtr><m:mtd><m:mo>−</m:mo><m:mi>z</m:mi></m:mtd></m:mtr></m:mtable></m:mrow><m:mrow><m:mi>e</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtable><m:mtr><m:mtd><m:mtable><m:mtr><m:mtd><m:msub><m:mrow><m:mi>x</m:mi></m:mrow><m:mrow><m:mi>p</m:mi></m:mrow></m:msub></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>y</m:mi></m:mrow><m:mrow><m:mi>p</m:mi></m:mrow></m:msub></m:mtd></m:mtr></m:mtable></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mi>z</m:mi></m:mrow><m:mrow><m:mi>p</m:mi></m:mrow></m:msub></m:mtd></m:mtr></m:mtable></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow></m:mrow></m:mrow></m:mtd></m:mtr><m:mtr><m:mtd><m:msub><m:mrow><m:mtext>p</m:mtext></m:mrow><m:mrow><m:mi>u</m:mi><m:mi>v</m:mi><m:mi>w</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:msup><m:mrow><m:mtable><m:mtr><m:mtd><m:mo>=</m:mo></m:mtd><m:mtd><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtext>u</m:mtext></m:mtd><m:mtd><m:mtext>v</m:mtext></m:mtd><m:mtd><m:mstyle><m:mrow><m:mtext>w</m:mtext></m:mrow></m:mstyle></m:mtd><m:mtd><m:mtext>e</m:mtext></m:mtd></m:mtr><m:mtr><m:mtd><m:mtext>0</m:mtext></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow></m:mtd></m:mtr></m:mtable></m:mrow><m:mrow><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:msup><m:msub><m:mrow><m:mtext>p</m:mtext></m:mrow><m:mrow><m:mi>x</m:mi><m:mi>y</m:mi><m:mi>z</m:mi><m:mn>.</m:mn></m:mrow></m:msub></m:mtd><m:mtd/></m:mtr></m:mtable></m:mrow><m:mspace width="3em"/><m:mo>(7.9)</m:mo></m:math>
</div>
</section>
<section>
<h2 id="sec30"><span aria-label="155" epub:type="pagebreak" id="pg_155" role="doc-pagebreak"/><span class="green">Frequently Asked Questions</span></h2>
<ul class="list-bullet">
<li>
<p class="list"><span class="green">Can’t I just hardcode transforms rather than use the matrix formalisms?</span></p>
<p class="noindent1b">Yes, but in practice it is harder to derive, harder to debug, and not any more efficient. Also, all current graphics APIs use this matrix formalism so it must be understood even to use graphics libraries.</p>
</li>
<li>
<p class="list"><span class="green">The bottom row of the matrix is always (0,0,0,1). Do I have to store it?</span></p>
<p class="noindent1b">You do not have to store it unless you include perspective transforms (<a href="C13_chapter8.xhtml#c8">Chapter 8</a>).</p>
</li>
</ul>
</section>
<section>
<h2 id="sec31"><span class="green">Notes</span></h2>
<p>The derivation of the transformation properties of normals is based on <em>Properties of Surface Normal Transformations</em> (Turkowski, 1990). In many treatments through the mid-1990s, vectors were represented as row vectors and premulti-plied, e.g., <strong>b</strong> = <strong>aM</strong>. In our notation, this would be <strong>b</strong><sup>T</sup> = <strong>a</strong><sup>T</sup><strong>M</strong><sup>T</sup>. If you want to find a rotation matrix <strong>R</strong> that takes one vector <strong>a</strong> to a vector <strong>b</strong> of the same length: <strong>b</strong> = <strong>Ra</strong>, you could use two rotations constructed from orthonormal bases. A more efficient method is given in <em>Efficiently Building a Matrix to Rotate One Vector to Another</em> (Akenine-Möller, Haines, &amp; Hoffman, 2008).</p>
</section>
<section>
<h2 id="sec32"><span class="green">Exercises</span></h2>
<p class="qpara"><span class="green">1.</span> Write down the 4 × 4 3D matrix to move by (<em>x<sub>m</sub>, y<sub>m</sub>, z<sub>m</sub></em>).</p>
<p class="qpara"><span class="green">2.</span> Write down the 4 × 4 3D matrix to rotate by an angle <em>θ</em> about the <em>y</em>-axis.</p>
<p class="qpara"><span class="green">3.</span> Write down the 4 × 4 3D matrix to scale an object by 50% in all directions.</p>
<p class="qpara"><span class="green">4.</span> Write the 2D rotation matrix that rotates by 90° clockwise.</p>
<p class="qpara"><span class="green">5.</span> Write the matrix from Exercise 4 as a product of three shear matrices.</p>
<p class="qpara"><span class="green">6.</span> Find the inverse of the rigid body transformation:</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mtext>R</m:mtext></m:mtd><m:mtd><m:mtext>t</m:mtext></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>000</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo></m:mrow></m:mrow></m:math>
<p>where <strong>R</strong> is a 3 × 3 rotation matrix and <strong>t</strong> is a 3-vector.</p>
</div>
<p class="qpara"><span class="green">7.</span> <span aria-label="156" epub:type="pagebreak" id="pg_156" role="doc-pagebreak"/>Show that the inverse of the matrix for an affine transformation (one that has all zeros in the bottom row except for a one in the lower right entry) also has the same form.</p>
<p class="qpara"><span class="green">8.</span> Describe in words what this 2D transform matrix does:</p>
<div class="disp-formula">
<m:math alttext=""><m:mrow><m:mrow><m:mo>[</m:mo><m:mtable><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mo>−</m:mo><m:mn>1</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>1</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr><m:mtr><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>0</m:mn></m:mtd><m:mtd><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable><m:mo>]</m:mo><m:mn>.</m:mn></m:mrow></m:mrow></m:math>
</div>
<p class="qpara"><span class="green">9.</span> Write down the 3 × 3 matrix that rotates a 2D point by angle <em>θ</em> about a point <strong>p</strong> = (<em>x<sub>p</sub>, y<sub>p</sub></em>) .</p>
<p class="qpara1"><span class="green">10.</span> Write down the 4 × 4 rotation matrix that takes the orthonormal 3D vectors <strong>u</strong> = (<em>x<sub>u</sub>, y<sub>u</sub>, z<sub>u</sub></em>), <strong>v</strong> = (<em>x<sub>v</sub>, y<sub>v</sub>, z<sub>v</sub></em>), and <strong>w</strong> = (<em>x<sub>w</sub>, y<sub>w</sub>, z<sub>w</sub></em>), to orthonormal 3D vectors <strong>a</strong> = (<em>x<sub>a</sub>, y<sub>a</sub>, z<sub>a</sub></em>), <strong>b</strong> = (<em>x<sub>b</sub>, y<sub>b</sub>, z<sub>b</sub></em>), and <strong>c</strong> = (<em>x<sub>c</sub>, y<sub>c</sub>, z<sub>c</sub></em>), So <em>M</em> <strong>u</strong> = <strong>a</strong>, <em>M</em> <strong>v</strong> = <strong>b</strong>,and <em>M</em> <strong>w</strong> = <strong>c</strong>.</p>
<p class="qpara1"><span class="green">11.</span> What is the inverse matrix for the answer to the previous problem?</p>
</section>
</section>
</body>
</html>