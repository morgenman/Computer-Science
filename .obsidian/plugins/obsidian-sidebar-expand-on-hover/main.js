/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const DEFAULT_SETTINGS = {
    leftSidebarWidth: 252,
    rightSidebarWidth: 252,
    leftPin: false,
    rightPin: false,
    leftSideEnabled: true,
    rightSideEnabled: true,
};
class SidebarExpandOnHoverPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        // Initializes the variables to store DOM HTML elements
        this.initialize = () => {
            this.leftRibbon = this.app.workspace.leftRibbon.containerEl;
            this.rightRibbon = this.app.workspace.rightRibbon.containerEl;
            this.leftSidebar = this.app.workspace
                .leftSplit.containerEl;
            this.rightSidebar = this.app.workspace
                .rightSplit.containerEl;
        };
        // Adds event listeners to the HTML elements
        this.setEvents = () => {
            this.registerDomEvent(document, 'mouseleave', () => {
                this.collapseSidebar(this.leftSidebar);
                this.collapseSidebar(this.rightSidebar);
            });
            this.registerDomEvent(this.app.workspace.rootSplit.containerEl, 'mouseenter', () => {
                this.collapseSidebar(this.leftSidebar);
                this.collapseSidebar(this.rightSidebar);
            });
            this.registerDomEvent(this.leftRibbon, 'mouseenter', () => {
                if (!this.settings.leftPin) {
                    this.expandSidebar(this.leftSidebar);
                }
            });
            this.registerDomEvent(this.rightRibbon, 'mouseenter', () => {
                if (!this.settings.rightPin) {
                    this.expandSidebar(this.rightSidebar);
                }
            });
            // To avoid 'glitch'
            this.registerDomEvent(this.app.workspace.leftSplit.resizeHandleEl, 'mouseenter', () => {
                if (!this.settings.leftPin) {
                    this.expandSidebar(this.leftSidebar);
                }
                this.settings.leftSidebarWidth = Number(this.app.workspace.leftSplit.size);
                this.saveSettings();
            });
            this.registerDomEvent(this.app.workspace.rightSplit.resizeHandleEl, 'mouseenter', () => {
                if (!this.settings.rightPin) {
                    this.expandSidebar(this.rightSidebar);
                }
                this.settings.rightSidebarWidth = Number(this.app.workspace.rightSplit.size);
                this.saveSettings();
            });
            // Double click on left ribbon to toggle pin/unpin of left sidebar
            this.registerDomEvent(this.leftRibbon, 'dblclick', () => {
                if (this.settings.leftSideEnabled) {
                    this.settings.leftPin = !this.settings.leftPin;
                    this.saveSettings();
                }
            });
            // Double click on right ribbon to toggle pin/unpin of right sidebar
            this.registerDomEvent(this.rightRibbon, 'dblclick', () => {
                if (this.settings.rightSideEnabled) {
                    this.settings.rightPin = !this.settings.rightPin;
                    this.saveSettings();
                }
            });
        };
        // Changes sidebar style width and display to expand it
        this.expandSidebar = (sidebar) => {
            if (sidebar == this.leftSidebar && this.settings.leftSideEnabled) {
                this.app.workspace.leftSplit.setSize(this.settings.leftSidebarWidth);
                this.app.workspace.leftSplit.expand();
            }
            if (sidebar == this.rightSidebar && this.settings.rightSideEnabled) {
                this.app.workspace.rightSplit.setSize(this.settings.rightSidebarWidth);
                this.app.workspace.rightSplit.expand();
            }
        };
        // Changes sidebar style width to collapse it
        this.collapseSidebar = (sidebar) => {
            if (sidebar == this.leftSidebar &&
                !this.settings.leftPin &&
                this.settings.leftSideEnabled) {
                this.app.workspace.leftSplit.collapse();
            }
            if (sidebar == this.rightSidebar &&
                !this.settings.rightPin &&
                this.settings.rightSideEnabled) {
                this.app.workspace.rightSplit.collapse();
            }
        };
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            // Initialize and set events when layout is fully ready
            this.app.workspace.onLayoutReady(() => {
                this.loadSettings().then(() => {
                    this.initialize();
                    this.setEvents();
                    this.addSettingTab(new SidebarExpandOnHoverSettingTab(this.app, this));
                    // This timeout is needed to override Obsidian sidebar state at launch
                    setTimeout(() => {
                        if (this.settings.leftPin) {
                            this.expandSidebar(this.leftSidebar);
                        }
                        else {
                            this.collapseSidebar(this.leftSidebar);
                        }
                        if (this.settings.rightPin) {
                            this.expandSidebar(this.rightSidebar);
                        }
                        else {
                            this.collapseSidebar(this.rightSidebar);
                        }
                    }, 200);
                });
            });
            this.addCommand({
                id: 'Toggle-Left-Sidebar-Expand-On-Hover',
                name: 'Toggle Left Sidebar Behavior',
                callback: () => {
                    this.settings.leftSideEnabled = !this.settings.leftSideEnabled;
                    if (this.settings.leftSideEnabled == false)
                        this.settings.leftPin = false;
                    this.saveSettings();
                    if (this.settings.leftSideEnabled) {
                        new obsidian.Notice('Left Sidebar Expand on Hover Enabled');
                    }
                    else {
                        new obsidian.Notice('Left Sidebar Expand on Hover disabled');
                    }
                },
            });
            this.addCommand({
                id: 'Toggle-Right-Sidebar-Expand-On-Hover',
                name: 'Toggle Right Sidebar Behavior',
                callback: () => {
                    this.settings.rightSideEnabled = !this.settings.rightSideEnabled;
                    if (this.settings.rightSideEnabled == false)
                        this.settings.rightPin = false;
                    this.saveSettings();
                    if (this.settings.rightSideEnabled) {
                        new obsidian.Notice('Right Sidebar Expand on Hover Enabled');
                    }
                    else {
                        new obsidian.Notice('Right Sidebar Expand on Hover disabled');
                    }
                },
            });
        });
    }
    onunload() {
        this.saveSettings();
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign(DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}
// Plugin settings
class SidebarExpandOnHoverSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        const { containerEl } = this;
        containerEl.empty();
        this.plugin.loadData();
        containerEl.createEl('h2', { text: 'Sidebar Expand On Hover' });
        containerEl.createEl('p', {
            text: `Note: You can also double click on each of the ribbons to 'pin' the corresponding 
      sidebar so that it remains expanded.
      You can undo this 'pinned state' behavior by double clicking on the ribbons again.
      This only works when you have that sidebar 'enabled' in this settings. Enjoy! :D`,
        });
        containerEl.createEl('h4', { text: 'Enable Individual Sidebar' });
        const leftSideEnabled = new obsidian.Setting(containerEl);
        leftSideEnabled.setName('Left Sidebar');
        leftSideEnabled.setDesc('Toggle to enable/disable left sidebar expand on hover');
        leftSideEnabled.addToggle((t) => {
            t.setValue(this.plugin.settings.leftSideEnabled);
            t.onChange((v) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.leftSideEnabled = v;
                if (v == false)
                    this.plugin.settings.leftPin = false;
                this.plugin.saveSettings();
            }));
        });
        const rightSideEnabled = new obsidian.Setting(containerEl);
        rightSideEnabled.setName('Right Sidebar');
        rightSideEnabled.setDesc('Toggle to enable/disable right sidebar expand on hover');
        rightSideEnabled.addToggle((t) => {
            t.setValue(this.plugin.settings.rightSideEnabled);
            t.onChange((v) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.rightSideEnabled = v;
                if (v == false)
                    this.plugin.settings.rightPin = false;
                this.plugin.saveSettings();
            }));
        });
        containerEl.createEl('h4', { text: 'Sidebar Expand Width' });
        const leftSidebarWidth = new obsidian.Setting(containerEl);
        leftSidebarWidth.setName('Left Sidebar');
        leftSidebarWidth.setDesc('Set the width of left sidebar in pixel unit');
        leftSidebarWidth.addText((t) => {
            t.setValue(String(this.plugin.settings.leftSidebarWidth));
            t.setPlaceholder('Default: 252').onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.leftSidebarWidth = Number(value);
                this.app.workspace.leftSplit.setSize(this.plugin.settings.leftSidebarWidth);
                this.plugin.saveSettings();
            }));
        });
        const rightSidebarWidth = new obsidian.Setting(containerEl);
        rightSidebarWidth.setName('Right Sidebar');
        rightSidebarWidth.setDesc('Set the width of right sidebar in pixel unit');
        rightSidebarWidth.addText((t) => {
            t.setValue(String(this.plugin.settings.rightSidebarWidth));
            t.setPlaceholder('Default: 252').onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.rightSidebarWidth = Number(value);
                this.app.workspace.rightSplit.setSize(this.plugin.settings.rightSidebarWidth);
                this.plugin.saveSettings();
            }));
        });
    }
}

module.exports = SidebarExpandOnHoverPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
