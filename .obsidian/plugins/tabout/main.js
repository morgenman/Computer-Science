/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class RuleEditModal extends obsidian.Modal {
    constructor(plugin, rule, idx) {
        super(plugin.app);
        this.plugin = plugin;
        this.rule = rule;
        this.idx = idx;
    }
    onOpen() {
        let { contentEl } = this;
        contentEl.empty();
        new obsidian.Setting(contentEl)
            .setName("Environment")
            .setClass("tabout-match-text")
            .setDesc("The Codemirror Token for the Environment.")
            .addText(text => {
            text
                .setValue(this.rule.tokenMatcher)
                .setPlaceholder("em")
                .onChange(value => {
                this.rule.tokenMatcher = value;
            });
        });
        new obsidian.Setting(contentEl)
            .setName("Jump after the Characters")
            .setClass("tabout-match-text")
            .setDesc("If enabled the Cursor will be set after the Characters, otherwise before them.")
            .addToggle(toggle => {
            toggle
                .setValue(this.rule.jumpAfter)
                .onChange(value => {
                this.rule.jumpAfter = value;
            });
        });
        this.rule.lookups.forEach((jumpChar, idx) => {
            new obsidian.Setting(contentEl)
                .setName(idx === 0 ? "Characters" : "")
                .setClass("tabout-jump-char")
                .addExtraButton(btn => {
                btn
                    .setIcon("trash")
                    .onClick(() => {
                    this.rule.lookups.remove(this.rule.lookups[idx]);
                    this.onOpen();
                });
            })
                .addText(text => {
                text
                    .setValue(jumpChar)
                    .setPlaceholder("**")
                    .onChange(value => {
                    this.rule.lookups[idx] = value;
                });
            });
        });
        new obsidian.Setting(contentEl)
            .setClass("tabout-jump-char")
            .addButton(bt => {
            bt.setButtonText("Add Character")
                .onClick(() => {
                this.rule.lookups.push("");
                this.onOpen();
            });
        });
        const btn = createEl("button", { text: "Save Rule", cls: "tabout-add-rule" });
        btn.onClickEvent(() => {
            this.close();
        });
        contentEl.createDiv({ cls: "tabout-add-rule-container" }).append(btn);
    }
    onClose() {
        let { contentEl } = this;
        contentEl.empty();
        dispatchEvent(new CustomEvent("tabout-edit-complete", { detail: { rule: this.rule, idx: this.idx } }));
    }
}

class RuleCreateModal extends obsidian.Modal {
    constructor(plugin, matcher = "") {
        super(plugin.app);
        this.plugin = plugin;
        this.rule = {
            lookups: [""],
            tokenMatcher: matcher,
            jumpAfter: true,
        };
    }
    onOpen() {
        let { contentEl } = this;
        contentEl.empty();
        new obsidian.Setting(contentEl)
            .setName("Environment")
            .setClass("tabout-match-text")
            .setDesc("The Codemirror Token for the Environment.")
            .addText(text => {
            text
                .setValue(this.rule.tokenMatcher)
                .setPlaceholder("em")
                .onChange(value => {
                this.rule.tokenMatcher = value;
            });
        });
        new obsidian.Setting(contentEl)
            .setName("Jump after the Characters")
            .setClass("tabout-match-text")
            .setDesc("If enabled the Cursor will be set after the Characters, otherwise before them.")
            .addToggle(toggle => {
            toggle
                .setValue(this.rule.jumpAfter)
                .onChange(value => {
                this.rule.jumpAfter = value;
            });
        });
        this.rule.lookups.forEach((jumpChar, idx) => {
            new obsidian.Setting(contentEl)
                .setName(idx === 0 ? "Characters" : "")
                .setClass("tabout-jump-char")
                .addExtraButton(btn => {
                btn
                    .setIcon("trash")
                    .onClick(() => {
                    this.rule.lookups.remove(this.rule.lookups[idx]);
                    this.onOpen();
                });
            })
                .addText(text => {
                text
                    .setValue(jumpChar)
                    .setPlaceholder("**")
                    .onChange(value => {
                    this.rule.lookups[idx] = value;
                });
            });
        });
        new obsidian.Setting(contentEl)
            .setClass("tabout-jump-char")
            .addButton(bt => {
            bt.setButtonText("Add Character")
                .onClick(() => {
                this.rule.lookups.push("");
                this.onOpen();
            });
        });
        const saveBtn = createEl("button", { text: "Add this Rule", cls: "tabout-add-rule" });
        saveBtn.onClickEvent(() => {
            if (this.rule.lookups.length >= 1 && this.rule.lookups.first()) {
                this.save();
                this.close();
            }
            else {
                new obsidian.Notice("Something is still Missing");
            }
        });
        const cancelBtn = createEl("button", { text: "Cancel", cls: "tabout-add-rule" });
        cancelBtn.onClickEvent(() => {
            this.close();
        });
        contentEl.createDiv({ cls: "tabout-add-rule-container" }).append(saveBtn, cancelBtn);
    }
    onClose() {
        let { contentEl } = this;
        contentEl.empty();
    }
    save() {
        dispatchEvent(new CustomEvent("tabout-rule-create", { detail: { rule: this.rule } }));
    }
}

class TaboutSettingsTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
        addEventListener("tabout-edit-complete", (e) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.rules[e.detail.idx] = e.detail.rule;
            this.display();
            yield this.plugin.saveSettings();
        }));
        addEventListener("tabout-rule-create", (e) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.rules.push(e.detail.rule);
            this.display();
            yield this.plugin.saveSettings();
        }));
    }
    display() {
        let { containerEl } = this;
        const { settings } = this.plugin;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Obsidian Tabout' });
        settings.rules.forEach((rule, idx) => {
            new obsidian.Setting(containerEl)
                .setName(`Rule #${idx}`)
                .setDesc(this.generateDescription(rule))
                .addButton(bt => {
                bt.setButtonText("Edit")
                    .onClick(() => {
                    new RuleEditModal(this.plugin, rule, idx).open();
                });
            })
                .addExtraButton(bt => {
                bt.setIcon("trash")
                    .setTooltip("Delete Rule")
                    .onClick(() => __awaiter(this, void 0, void 0, function* () {
                    settings.rules.remove(rule);
                    yield this.plugin.saveSettings();
                    this.display();
                }));
            });
        });
        const btn = createEl("button", { text: "Add Rule", cls: "tabout-add-rule" });
        btn.onClickEvent(() => {
            new RuleCreateModal(this.plugin).open();
        });
        containerEl.createDiv({ cls: "tabout-add-rule-container" }).append(btn);
    }
    generateDescription(rule) {
        let descEl = document.createDocumentFragment();
        descEl.append("This Rule is only active in ");
        descEl.append(createEl("code", { text: rule.tokenMatcher ? rule.tokenMatcher : "all" }));
        descEl.append(" Environments and with the press of ");
        descEl.append(createEl("kbd", { text: "Tab", cls: "tabout-kbd" }));
        descEl.append(" you will jump to one of these characters: ");
        rule.lookups.forEach((char, i) => {
            descEl.append(createEl("code", { text: char }));
            if (i != rule.lookups.length - 1) {
                descEl.append(", ");
            }
        });
        return descEl;
    }
}

const DEFAULT_SETTINGS = {
    rules: [
        {
            tokenMatcher: "hmd-internal-link",
            lookups: ["]]"],
            jumpAfter: true,
        },
        {
            tokenMatcher: "strong",
            lookups: ["**"],
            jumpAfter: true,
        },
        {
            tokenMatcher: "em",
            lookups: ["*"],
            jumpAfter: true,
        },
        {
            tokenMatcher: "code",
            lookups: ["`"],
            jumpAfter: true,
        },
        {
            tokenMatcher: "math",
            lookups: ["{", "("],
            jumpAfter: true,
        }
    ],
};

class TaboutPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.handleTabs = (cm, changeObj) => {
            var _a;
            if (changeObj.text.first() === "	") {
                for (let rule of this.settings.rules) {
                    // If Cursor is in correct environment
                    if (!rule.tokenMatcher || ((_a = cm.getTokenTypeAt(cm.getCursor())) === null || _a === void 0 ? void 0 : _a.contains(rule.tokenMatcher))) {
                        // Get Cursor Position
                        const pos = cm.getCursor();
                        // Get content of Line after Cursor
                        const afterCursor = cm.getLine(pos.line).substring(pos.ch);
                        // Determine the nearest character
                        const nextChar = Math.min(...this.getIndices(rule.lookups, afterCursor, rule.jumpAfter));
                        // If there is a nearest one jump right after it
                        if (nextChar != Infinity) {
                            // @ts-ignore Don't insert the Tab
                            changeObj.cancel();
                            cm.setCursor(pos.line, pos.ch + nextChar);
                        }
                    }
                }
            }
        };
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            this.addSettingTab(new TaboutSettingsTab(this.app, this));
            this.addCommand({
                id: "tabout-add-rule-here",
                name: "Add Rule for this Environment",
                editorCallback: (editor) => {
                    var _a;
                    //@ts-expect-error
                    new RuleCreateModal(this, (_a = editor.cm.getTokenTypeAt(editor.getCursor())) !== null && _a !== void 0 ? _a : "").open();
                }
            });
            this.registerCodeMirror((cm) => {
                cm.on("beforeChange", this.handleTabs);
            });
        });
    }
    getIndices(rules, afterCursor, jumpAfter) {
        let n = [];
        rules.forEach(r => {
            let idx = afterCursor.indexOf(r);
            if (idx != -1) {
                n.push(jumpAfter ? idx + r.length : idx);
            }
        });
        return n;
    }
    //This is needed to also work when Obsidian is set to using Spaces instead of Tabs. (doesnt work yet haha)
    getTabString(ch) {
        //@ts-expect-error
        if (this.app.vault.getConfig("useTab")) {
            return "";
        }
        else {
            let tab = "";
            //@ts-expect-error
            const tabSize = this.app.vault.getConfig("tabSize");
            let remaining = ch - tabSize;
            for (let i = 0; i < remaining; i++) {
                tab += " ";
            }
            return tab;
        }
    }
    onunload() {
        this.app.workspace.iterateCodeMirrors(cm => cm.off("beforeChange", this.handleTabs));
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}

module.exports = TaboutPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
