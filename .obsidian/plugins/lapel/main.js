/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var S=Object.defineProperty;var T=Object.getOwnPropertyDescriptor;var M=Object.getOwnPropertyNames;var P=Object.prototype.hasOwnProperty;var y=(r,i)=>{for(var s in i)S(r,s,{get:i[s],enumerable:!0})},C=(r,i,s,e)=>{if(i&&typeof i=="object"||typeof i=="function")for(let t of M(i))!P.call(r,t)&&t!==s&&S(r,t,{get:()=>i[t],enumerable:!(e=T(i,t))||e.enumerable});return r};var A=r=>C(S({},"__esModule",{value:!0}),r);var V={};y(V,{default:()=>w});module.exports=A(V);var v=require("obsidian");var g=require("@codemirror/view"),m=require("obsidian"),c=require("@codemirror/language"),o=require("@codemirror/state"),B=[1,2,3,4,5,6],E="cm-heading-marker",L=class extends g.GutterMarker{constructor(s,e,t,n){super();this.view=s;this.headingLevel=e;this.from=t;this.to=n}toDOM(){let s=createDiv({cls:E});return s.dataset.level=String(this.headingLevel),s}};function k(r){let i=g.ViewPlugin.fromClass(class{constructor(e){this.view=e,this.markers=this.buildMarkers(e)}buildMarkers(e){let t=new o.RangeSetBuilder;return(0,c.syntaxTree)(e.state).iterate({enter:({type:n,from:a,to:l})=>{var d;let h=/header-(\d)$/.exec((d=n.prop(c.lineClassNodeProp))!=null?d:"");if(h){let b=Number(h[1]),u=new L(e,b,a,l);t.add(a,l,u)}}}),t.finish()}update(e){return e.state.field(m.editorLivePreviewField)?(this.markers=this.buildMarkers(this.view),this.markers):(this.markers=o.RangeSet.empty,this.markers)}}),s=r?o.Prec.high:o.Prec.low;return[i,s((0,g.gutter)({class:"cm-lapel",markers(e){var t;return((t=e.plugin(i))==null?void 0:t.markers)||o.RangeSet.empty},domEventHandlers:{click:(e,t,n)=>{var a;if((a=n.targetNode)!=null&&a.instanceOf(HTMLElement)){let l=n.targetNode;if(!l.hasClass(E))return!1;if(l.hasClass("has-active-menu"))return!0;let h=new m.Menu;for(let d of B)h.addItem(b=>b.setIcon("lucide-heading-"+d).setTitle(`Heading ${d}`).onClick(()=>{let u=e.state.doc.lineAt(t.from),N=u.text.replace(/^#{1,6} /,"");e.dispatch({changes:{from:u.from,to:u.to,insert:`${"#".repeat(d)} ${N}`}})}));return h.setParentElement(l).showAtMouseEvent(n),!0}return!1},mousedown:(e,t,n)=>{var a;return(a=n.targetNode)!=null&&a.instanceOf(HTMLElement)?n.targetNode.hasClass(E):!1}}}))]}var f=require("obsidian"),x={showBeforeLineNumbers:!0},p=class extends f.PluginSettingTab{constructor(s,e){super(s,e);this.plugin=e}display(){let{containerEl:s}=this;s.empty(),s.createEl("h3",{text:"Appearance"}),new f.Setting(s).setName("Show before line numbers").setDesc("Toggle whether the heading markers are shown before or after the line numbers in the gutter.").addToggle(e=>e.setValue(this.plugin.settings.showBeforeLineNumbers).onChange(async t=>{this.plugin.updateSettings(()=>({showBeforeLineNumbers:t}))}))}};var w=class extends v.Plugin{constructor(){super(...arguments);this.extensions=[]}async onload(){await this.loadSettings(),this.extensions.push(k(this.settings.showBeforeLineNumbers)),this.registerEditorExtension(this.extensions),this.registerSettingsTab()}async loadSettings(){this.settings=Object.assign({},x,await this.loadData())}registerSettingsTab(){this.addSettingTab(new p(this.app,this))}async updateSettings(s){let e=s(this.settings),t=Object.assign({},this.settings,e);if(this.settings.showBeforeLineNumbers!==e.showBeforeLineNumbers){let n=k(t.showBeforeLineNumbers);this.extensions[0]=n,this.app.workspace.updateOptions()}this.settings=t,await this.saveData(this.settings)}};

/* nosourcemap */